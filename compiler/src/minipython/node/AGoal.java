/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AGoal extends PGoal
{
    private final LinkedList _command_ = new TypedLinkedList(new Command_Cast());

    public AGoal()
    {
    }

    public AGoal(
        List _command_)
    {
        {
            this._command_.clear();
            this._command_.addAll(_command_);
        }

    }
    public Object clone()
    {
        return new AGoal(
            cloneList(_command_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGoal(this);
    }

    public LinkedList getCommand()
    {
        return _command_;
    }

    public void setCommand(List list)
    {
        _command_.clear();
        _command_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_command_);
    }

    void removeChild(Node child)
    {
        if(_command_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _command_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Command_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PCommand node = (PCommand) o;

            if((node.parent() != null) &&
                (node.parent() != AGoal.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AGoal.this))
            {
                node.parent(AGoal.this);
            }

            return node;
        }
    }
}
