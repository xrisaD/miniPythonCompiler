/*
* Test Comments
*/

Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]];
	d_quote = '"';
    s_quote = ''';

Tokens
	line_comment = '#' not_eol* eol; 

	tab = 9;
	assign = '=';
	minus_assign = '-=';
	div_assign = '/=';
	exclam = '!';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma=',';
	qmark = '?';
	semi = ';';
    	dot = '.';

	plus = '+';
	minus = '-';
	mult = '*';
	div = '/';
	mode = '%';
	dmult = '**';


	if = 'if';
	in = 'in';
	elif = 'elif';
	else = 'else';
	while = 'while';
	for = 'for';
	print = 'print';
	return = 'return';
	open = 'open';
	type = 'type';
	max = 'max';
	min = 'min';
	assert = 'assert';
	dictt = 'dict';
	def = 'def';
	none = 'None';


	leq = '<=';
	less = '<';
	geq = '>=';
	great = '>';
	neq = '!=';
	eq = '==';

	true = 'true';
	false = 'false';

	and = 'and';
	or = 'or';

	colon = ':';
	quote = '"';
	blank = (' ' | lf | cr);
	integer_literal = digit+ | (digit+ '.' digit+);
	identifier = letter (letter | digit | '_')*;
	string_literal = d_quote not_eol* d_quote|s_quote not_eol* s_quote;

Ignored Tokens
	blank, line_comment;

Productions
	goal = command*;

	command = {func} function | {statement} statement;

	function = def identifier l_par argument? r_par colon statement;

    argument = identifier assign_value? comma_id_assign_value*;

    comma_id_assign_value = comma identifier assign_value?;
    assign_value = assign value;


    statement = {if}tab* if comparison colon statement|
                {while}tab* while comparison colon statement|
                {for}tab* for [id1]: identifier in [id2]: identifier colon statement|
                {return}tab* return expression|
                {print}tab* print expression comma_expression*|
                {assignment}tab* assignment_statement|
                {assert}tab* assert expression comma_expression?|
                {func_call} function_call;

    assignment_statement = {assign}identifier assign expression|
                            {minus_assign}identifier minus_assign expression|
                            {div_assign}identifier div_assign expression|
                            {assign_list}identifier l_br [ex1]: expression r_br assign [ex2]: expression;

    expression = {sum} sum | 
		{value} value;

    sum = {sum} sum plus term |
	{minus} sum minus term |
	{term} term ;

    term = {mult} term mult power|
	   {div} term div power |
	   {modulo} term mode power|
	   {power} power;

    power = {exp} power dmult subscription |
	    {subscription} subscription;

    subscription = {subscription} identifier l_br func r_br |
	   	   {func} func ;

    func = {open} open l_par [left]: expression comma [right]: expression r_par |
	   {type} type l_par identifier r_par |
	   {max} max l_par value comma_value+ r_par |
	   {min} min l_par value comma_value+ r_par |
	   {func} function_call |
	   {par} par;
    
    comma_value = comma value;

    par = {par} l_par expression r_par |
	  {expression} expression ;
	  

    comparison = true;

    value = {fun_call}identifier dot function_call |
            {num}number |
            {string}string_literal;

    number = integer_literal;

    function_call = identifier l_par arglist? r_par;

    arglist = expression comma_expression*;

    comma_expression = comma expression;
