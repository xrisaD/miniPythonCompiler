/*
* Nikolaos Smyrnioudis ( 3170148)
* Dikonimaki Chrysoula ( 3170039)
* Konstantopoulos Konstantinos ( 3170086 )
*/

Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]];
	d_quote = '"';
    	s_quote = ''';

Tokens
	line_comment = '#' not_eol* eol; 

	tab = 9;
	assign = '=';
	minus_assign = '-=';
	div_assign = '/=';
	exclam = '!';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma=',';
	qmark = '?';
	semi = ';';
    	dot = '.';

	plus = '+';
	minus = '-';
	mult = '*';
	div = '/';
	mode = '%';
	dmult = '**';


	if = 'if';
	in = 'in';
	elif = 'elif';
	else = 'else';
	while = 'while';
	for = 'for';
	print = 'print';
	return = 'return';
	open = 'open';
	type = 'type';
	max = 'max';
	min = 'min';
	assert = 'assert';
	dictt = 'dict';
	def = 'def';
	none = 'None';


	leq = '<=';
	less = '<';
	geq = '>=';
	great = '>';
	neq = '!=';
	eq = '==';

	true = 'true';
	false = 'false';

	and = 'and';
	or = 'or';
	not = 'not';

	colon = ':';
	quote = '"';
	blank = (' ' | lf | cr);
	integer_literal = digit+ | (digit+ '.' digit+);
	identifier = letter (letter | digit | '_')*;
	string_literal = d_quote not_eol* d_quote|s_quote not_eol* s_quote;

Ignored Tokens
	blank, line_comment;

Productions
	goal = command* {-> New goal( [command] ) };

	command = {func} function {-> New command.func(function)}|
	           {statement} statement {-> New command.statement(statement)};

	function = def identifier l_par argument? r_par colon statement {-> New function(identifier, [argument.identifier_value], statement)};

    argument{-> identifier_value*} = identifier_assign_value comma_id_assign_value* {-> [identifier_assign_value.identifier_value comma_id_assign_value.identifier_value]};

    identifier_assign_value{->identifier_value} = identifier assign_value?{-> New identifier_value(identifier, assign_value.value) };
    comma_id_assign_value{->identifier_value} = comma identifier_assign_value? {-> identifier_assign_value.identifier_value};
    assign_value{-> value} = assign value{-> value.value};


    statement = {if}tab* if comparison colon statement {-> New statement.if(comparison, statement)} |
                {while}tab* while comparison colon statement {-> New statement.while(comparison, statement)} |
                {for}tab* for [id1]: identifier in [id2]: identifier colon statement {-> New statement.for(id1, id2, statement)} |
                {return}tab* return expression {-> New statement.return(expression)}|
                {print}tab* print expression comma_expression* {-> New statement.print(expression, [comma_expression.expression])}|
                {assignment}tab* assignment_statement {-> assignment_statement.statement}|
                {assert}tab* assert expression comma_expression? {-> New statement.assert(expression, comma_expression.expression)}|
                {func_call}tab* function_call {-> New statement.func_call(function_call)};

    assignment_statement{->statement} = {assign}identifier assign expression {-> New statement.assign(identifier,expression)}|
                            {minus_assign}identifier minus_assign expression {-> New statement.minus_assign(identifier,expression)}|
                            {div_assign}identifier div_assign expression {-> New statement.div_assign(identifier,expression)}|
                            {assign_list}identifier l_br [ex1]: expression r_br assign [ex2]: expression {-> New statement.assign_list(identifier,ex1,ex2)};

    expression = sum{-> sum.expression};

    sum{->expression} = {sum} sum plus term {-> New expression.sum(sum.expression, term.expression)}|
	{minus} sum minus term {-> New expression.minus(sum.expression, term.expression)}|
	{term} term {-> term.expression};

    term{->expression} = {mult} term mult power {-> New expression.mult(term.expression, power.expression)}|
	   {div} term div power {-> New expression.div(term.expression, power.expression)}|
	   {modulo} term mode power {-> New expression.modulo(term.expression, power.expression)}|
	   {power} power {-> power.expression};

    power{->expression} = {exp} power dmult subscription {-> New expression.pow(power.expression, subscription.expression)}|
	    {subscription} subscription {-> subscription.expression};

    subscription{->expression} = {subscription} identifier l_br expression r_br {-> New expression.subscription(identifier, expression)}|
	   	   {func} func {-> func.expression};

    func{-> expression} = {open} open l_par [left]: expression comma [right]: expression r_par {-> New expression.open(left, right)}|
	   {type} type l_par identifier r_par {-> New expression.type(identifier)}|
	   {max} max l_par value comma_value+ r_par {-> New expression.max(value, [comma_value.value])}|
	   {min} min l_par value comma_value+ r_par {-> New expression.min(value, [comma_value.value])}|
	   {func} function_call {-> New expression.func_call(function_call)}|
	   {par} par {-> par.expression}|
	   {list_def} l_br expression comma_expression* r_br {-> New expression.list_def(expression, [comma_expression.expression])};
    
    comma_value{->value} = comma value {-> value};

    par{-> expression} = {par} l_par expression r_par {-> expression}|
	                      {something} something {-> something.expression};

    something{-> expression} = {value} value {-> New expression.value(value)}|
		{identifier} identifier {-> New expression.identifier(identifier)};
	  

    comparison = disjunction {-> disjunction.comparison};

    disjunction{-> comparison} = {or} disjunction or conjuction {-> New comparison.or(disjunction.comparison, conjuction.comparison)}|
		                         {and} conjuction {-> conjuction.comparison};

    conjuction{-> comparison} = {and} conjuction and negated {-> New comparison.and(conjuction.comparison, negated.comparison)}|
		                        {not} negated {-> negated.comparison};

    negated{-> comparison} = {negated} not clause {-> New comparison.not(clause.comparison)}|
	     {clause}clause {-> clause.comparison};

    clause{-> comparison} = {great} [lhs]: expression great [rhs]: expression {-> New comparison.great(lhs,rhs)}|
	     {less} [lhs]: expression less [rhs]: expression {-> New comparison.less(lhs,rhs)}|
	     {leq} [lhs]: expression leq [rhs]: expression {-> New comparison.leq(lhs,rhs)}|
	     {geq} [lhs]: expression geq [rhs]: expression {-> New comparison.geq(lhs,rhs)}|
	     {neq} [lhs]: expression neq [rhs]: expression {-> New comparison.neq(lhs,rhs)}|
	     {eq} [lhs]: expression eq [rhs]: expression {-> New comparison.eq(lhs,rhs)}|
	     {literal} boolean_literal {-> boolean_literal.comparison};

    boolean_literal{-> comparison} = {true} true {-> New comparison.true()}|
                                    {false} false {-> New comparison.false()};

    value{-> value} = {fun_call}identifier dot function_call {-> New value.method(identifier, function_call)}|
            {num}number {-> number.value}|
            {string}string_literal {-> New value.string(string_literal)}|
            {none} none {-> New value.none(none)};

    number{->value} = integer_literal {-> New value.number(integer_literal)};

    function_call = identifier l_par arglist? r_par {-> New function_call(identifier, [arglist.expression])};

    arglist{-> expression*} = expression comma_expression* {-> [expression comma_expression.expression]};

    comma_expression{-> expression} = comma expression{->expression};

Abstract Syntax Tree
    goal = command*;
    command = {func} function | {statement} statement ;
    function =  identifier identifier_value* statement;
    argument = [id1]:identifier_value [id2]:identifier_value*;
    identifier_value = identifier value?;

    statement = {if} comparison statement|
                {while} comparison statement|
                {for}[id1]: identifier [id2]: identifier statement|
                {return}expression|
                {print} [exp1]:expression [exp2]:expression*|
                {assert}[exp1]:expression [exp2]:expression?|
                {func_call} function_call|
                {assign}identifier expression|
                {minus_assign}identifier expression|
                {div_assign}identifier expression|
                {assign_list}identifier [ex1]: expression [ex2]: expression;

    expression = {sum} [e1]:expression [e2]:expression |
                 {minus} [e1]:expression [e2]:expression |
                 {mult} [e1]:expression [e2]:expression |
                 {div} [e1]:expression [e2]:expression |
                 {modulo} [e1]:expression [e2]:expression |
                 {pow} [e1]:expression [e2]:expression |
                 {subscription} identifier expression |
                 {func_call} function_call |
                 {value} value |
                 {identifier} identifier |
                 {open} [e1]:expression [e2]:expression |
                 {type} identifier |
                 {max} [v1]:value [v2]:value+|
                 {min} [v1]:value [v2]:value+|
                 {par} expression |
                 {list_def} [e1]:expression [e2]:expression*;

    comparison = {and} [comp1]:comparison [comp2]:comparison |
                 {or} [comp1]:comparison [comp2]:comparison |
                 {not} comparison |
                 {great} [lhs]: expression [rhs]: expression|
                 {less} [lhs]: expression [rhs]: expression |
                 {leq} [lhs]: expression [rhs]: expression |
                 {geq} [lhs]: expression [rhs]: expression |
                 {neq} [lhs]: expression [rhs]: expression |
                 {eq} [lhs]: expression [rhs]: expression |
                 {true}|
                 {false};

    function_call = identifier expression*;

    value = {method} identifier function_call|{number}integer_literal|{string}string_literal|{none}none;