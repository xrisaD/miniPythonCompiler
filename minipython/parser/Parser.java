/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.parser;

import minipython.lexer.*;
import minipython.node.*;
import minipython.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {

                    case 0:
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;


                    case 1:
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;


                    case 2:
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;


                    case 3:
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;


                    case 4:
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;


                    case 5:
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;


                    case 6:
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;


                    case 7:
		    {
			ArrayList list = new7();
			push(goTo(3), list);
		    }
		    break;


                    case 8:
		    {
			ArrayList list = new8();
			push(goTo(3), list);
		    }
		    break;


                    case 9:
		    {
			ArrayList list = new9();
			push(goTo(3), list);
		    }
		    break;


                    case 10:
		    {
			ArrayList list = new10();
			push(goTo(4), list);
		    }
		    break;


                    case 11:
		    {
			ArrayList list = new11();
			push(goTo(4), list);
		    }
		    break;


                    case 12:
		    {
			ArrayList list = new12();
			push(goTo(5), list);
		    }
		    break;


                    case 13:
		    {
			ArrayList list = new13();
			push(goTo(6), list);
		    }
		    break;


                    case 14:
		    {
			ArrayList list = new14();
			push(goTo(6), list);
		    }
		    break;


                    case 15:
		    {
			ArrayList list = new15();
			push(goTo(6), list);
		    }
		    break;


                    case 16:
		    {
			ArrayList list = new16();
			push(goTo(6), list);
		    }
		    break;


                    case 17:
		    {
			ArrayList list = new17();
			push(goTo(6), list);
		    }
		    break;


                    case 18:
		    {
			ArrayList list = new18();
			push(goTo(6), list);
		    }
		    break;


                    case 19:
		    {
			ArrayList list = new19();
			push(goTo(6), list);
		    }
		    break;


                    case 20:
		    {
			ArrayList list = new20();
			push(goTo(6), list);
		    }
		    break;


                    case 21:
		    {
			ArrayList list = new21();
			push(goTo(6), list);
		    }
		    break;


                    case 22:
		    {
			ArrayList list = new22();
			push(goTo(6), list);
		    }
		    break;


                    case 23:
		    {
			ArrayList list = new23();
			push(goTo(6), list);
		    }
		    break;


                    case 24:
		    {
			ArrayList list = new24();
			push(goTo(6), list);
		    }
		    break;


                    case 25:
		    {
			ArrayList list = new25();
			push(goTo(6), list);
		    }
		    break;


                    case 26:
		    {
			ArrayList list = new26();
			push(goTo(6), list);
		    }
		    break;


                    case 27:
		    {
			ArrayList list = new27();
			push(goTo(6), list);
		    }
		    break;


                    case 28:
		    {
			ArrayList list = new28();
			push(goTo(6), list);
		    }
		    break;


                    case 29:
		    {
			ArrayList list = new29();
			push(goTo(6), list);
		    }
		    break;


                    case 30:
		    {
			ArrayList list = new30();
			push(goTo(6), list);
		    }
		    break;


                    case 31:
		    {
			ArrayList list = new31();
			push(goTo(6), list);
		    }
		    break;


                    case 32:
		    {
			ArrayList list = new32();
			push(goTo(6), list);
		    }
		    break;


                    case 33:
		    {
			ArrayList list = new33();
			push(goTo(7), list);
		    }
		    break;


                    case 34:
		    {
			ArrayList list = new34();
			push(goTo(7), list);
		    }
		    break;


                    case 35:
		    {
			ArrayList list = new35();
			push(goTo(7), list);
		    }
		    break;


                    case 36:
		    {
			ArrayList list = new36();
			push(goTo(7), list);
		    }
		    break;


                    case 37:
		    {
			ArrayList list = new37();
			push(goTo(8), list);
		    }
		    break;


                    case 38:
		    {
			ArrayList list = new38();
			push(goTo(9), list);
		    }
		    break;


                    case 39:
		    {
			ArrayList list = new39();
			push(goTo(9), list);
		    }
		    break;


                    case 40:
		    {
			ArrayList list = new40();
			push(goTo(9), list);
		    }
		    break;


                    case 41:
		    {
			ArrayList list = new41();
			push(goTo(10), list);
		    }
		    break;


                    case 42:
		    {
			ArrayList list = new42();
			push(goTo(10), list);
		    }
		    break;


                    case 43:
		    {
			ArrayList list = new43();
			push(goTo(10), list);
		    }
		    break;


                    case 44:
		    {
			ArrayList list = new44();
			push(goTo(10), list);
		    }
		    break;


                    case 45:
		    {
			ArrayList list = new45();
			push(goTo(11), list);
		    }
		    break;


                    case 46:
		    {
			ArrayList list = new46();
			push(goTo(11), list);
		    }
		    break;


                    case 47:
		    {
			ArrayList list = new47();
			push(goTo(12), list);
		    }
		    break;


                    case 48:
		    {
			ArrayList list = new48();
			push(goTo(12), list);
		    }
		    break;


                    case 49:
		    {
			ArrayList list = new49();
			push(goTo(13), list);
		    }
		    break;


                    case 50:
		    {
			ArrayList list = new50();
			push(goTo(13), list);
		    }
		    break;


                    case 51:
		    {
			ArrayList list = new51();
			push(goTo(13), list);
		    }
		    break;


                    case 52:
		    {
			ArrayList list = new52();
			push(goTo(13), list);
		    }
		    break;


                    case 53:
		    {
			ArrayList list = new53();
			push(goTo(13), list);
		    }
		    break;


                    case 54:
		    {
			ArrayList list = new54();
			push(goTo(13), list);
		    }
		    break;


                    case 55:
		    {
			ArrayList list = new55();
			push(goTo(13), list);
		    }
		    break;


                    case 56:
		    {
			ArrayList list = new56();
			push(goTo(13), list);
		    }
		    break;


                    case 57:
		    {
			ArrayList list = new57();
			push(goTo(14), list);
		    }
		    break;


                    case 58:
		    {
			ArrayList list = new58();
			push(goTo(15), list);
		    }
		    break;


                    case 59:
		    {
			ArrayList list = new59();
			push(goTo(15), list);
		    }
		    break;


                    case 60:
		    {
			ArrayList list = new60();
			push(goTo(16), list);
		    }
		    break;


                    case 61:
		    {
			ArrayList list = new61();
			push(goTo(16), list);
		    }
		    break;


                    case 62:
		    {
			ArrayList list = new62();
			push(goTo(17), list);
		    }
		    break;


                    case 63:
		    {
			ArrayList list = new63();
			push(goTo(18), list);
		    }
		    break;


                    case 64:
		    {
			ArrayList list = new64();
			push(goTo(18), list);
		    }
		    break;


                    case 65:
		    {
			ArrayList list = new65();
			push(goTo(19), list);
		    }
		    break;


                    case 66:
		    {
			ArrayList list = new66();
			push(goTo(19), list);
		    }
		    break;


                    case 67:
		    {
			ArrayList list = new67();
			push(goTo(20), list);
		    }
		    break;


                    case 68:
		    {
			ArrayList list = new68();
			push(goTo(20), list);
		    }
		    break;


                    case 69:
		    {
			ArrayList list = new69();
			push(goTo(21), list);
		    }
		    break;


                    case 70:
		    {
			ArrayList list = new70();
			push(goTo(21), list);
		    }
		    break;


                    case 71:
		    {
			ArrayList list = new71();
			push(goTo(21), list);
		    }
		    break;


                    case 72:
		    {
			ArrayList list = new72();
			push(goTo(21), list);
		    }
		    break;


                    case 73:
		    {
			ArrayList list = new73();
			push(goTo(21), list);
		    }
		    break;


                    case 74:
		    {
			ArrayList list = new74();
			push(goTo(21), list);
		    }
		    break;


                    case 75:
		    {
			ArrayList list = new75();
			push(goTo(21), list);
		    }
		    break;


                    case 76:
		    {
			ArrayList list = new76();
			push(goTo(22), list);
		    }
		    break;


                    case 77:
		    {
			ArrayList list = new77();
			push(goTo(22), list);
		    }
		    break;


                    case 78:
		    {
			ArrayList list = new78();
			push(goTo(23), list);
		    }
		    break;


                    case 79:
		    {
			ArrayList list = new79();
			push(goTo(23), list);
		    }
		    break;


                    case 80:
		    {
			ArrayList list = new80();
			push(goTo(23), list);
		    }
		    break;


                    case 81:
		    {
			ArrayList list = new81();
			push(goTo(23), list);
		    }
		    break;


                    case 82:
		    {
			ArrayList list = new82();
			push(goTo(24), list);
		    }
		    break;


                    case 83:
		    {
			ArrayList list = new83();
			push(goTo(25), list);
		    }
		    break;


                    case 84:
		    {
			ArrayList list = new84();
			push(goTo(25), list);
		    }
		    break;


                    case 85:
		    {
			ArrayList list = new85();
			push(goTo(26), list);
		    }
		    break;


                    case 86:
		    {
			ArrayList list = new86();
			push(goTo(26), list);
		    }
		    break;


                    case 87:
		    {
			ArrayList list = new87();
			push(goTo(27), list);
		    }
		    break;


                    case 88:
		    {
			ArrayList list = new88();
			push(goTo(28), list);
		    }
		    break;


                    case 89:
		    {
			ArrayList list = new89();
			push(goTo(28), list);
		    }
		    break;


                    case 90:
		    {
			ArrayList list = new90();
			push(goTo(29), list);
		    }
		    break;


                    case 91:
		    {
			ArrayList list = new91();
			push(goTo(29), list);
		    }
		    break;


                    case 92:
		    {
			ArrayList list = new92();
			push(goTo(30), list);
		    }
		    break;


                    case 93:
		    {
			ArrayList list = new93();
			push(goTo(30), list);
		    }
		    break;


                    case 94:
		    {
			ArrayList list = new94();
			push(goTo(31), list);
		    }
		    break;


                    case 95:
		    {
			ArrayList list = new95();
			push(goTo(31), list);
		    }
		    break;


                    case 96:
		    {
			ArrayList list = new96();
			push(goTo(32), list);
		    }
		    break;


                    case 97:
		    {
			ArrayList list = new97();
			push(goTo(32), list);
		    }
		    break;

                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PGoal node1 = (PGoal) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0()
    {
        ArrayList nodeList = new ArrayList();

        PGoal pgoalNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        }

        pgoalNode1 = new AGoal(listNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new1()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGoal pgoalNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pgoalNode1 = new AGoal(listNode3);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new2()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommand pcommandNode1;
        {
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pcommandNode1 = new AFuncCommand(pfunctionNode2);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    ArrayList new3()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommand pcommandNode1;
        {
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pcommandNode1 = new AStatementCommand(pstatementNode2);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    ArrayList new4()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TDef tdefNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        Object nullNode5 = null;
        TRPar trparNode6;
        TColon tcolonNode7;
        PStatement pstatementNode8;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tcolonNode7 = (TColon)nodeArrayList5.get(0);
        pstatementNode8 = (PStatement)nodeArrayList6.get(0);

        pfunctionNode1 = new AFunction(tdefNode2, tidentifierNode3, tlparNode4, null, trparNode6, tcolonNode7, pstatementNode8);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new5()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TDef tdefNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        PArgument pargumentNode5;
        TRPar trparNode6;
        TColon tcolonNode7;
        PStatement pstatementNode8;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pargumentNode5 = (PArgument)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tcolonNode7 = (TColon)nodeArrayList6.get(0);
        pstatementNode8 = (PStatement)nodeArrayList7.get(0);

        pfunctionNode1 = new AFunction(tdefNode2, tidentifierNode3, tlparNode4, pargumentNode5, trparNode6, tcolonNode7, pstatementNode8);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new6()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
        }

        pargumentNode1 = new AArgument(tidentifierNode2, null, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new7()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        PAssignValue passignvalueNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        passignvalueNode3 = (PAssignValue)nodeArrayList2.get(0);
        {
        }

        pargumentNode1 = new AArgument(tidentifierNode2, passignvalueNode3, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new8()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgument(tidentifierNode2, null, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new9()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        PAssignValue passignvalueNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        passignvalueNode3 = (PAssignValue)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgument(tidentifierNode2, passignvalueNode3, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new10()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommaIdAssignValue pcommaidassignvalueNode1;
        {
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pcommaidassignvalueNode1 = new ACommaIdAssignValue(tcommaNode2, tidentifierNode3, null);
        }
	nodeList.add(pcommaidassignvalueNode1);
        return nodeList;
    }



    ArrayList new11()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommaIdAssignValue pcommaidassignvalueNode1;
        {
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        PAssignValue passignvalueNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        passignvalueNode4 = (PAssignValue)nodeArrayList3.get(0);

        pcommaidassignvalueNode1 = new ACommaIdAssignValue(tcommaNode2, tidentifierNode3, passignvalueNode4);
        }
	nodeList.add(pcommaidassignvalueNode1);
        return nodeList;
    }



    ArrayList new12()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignValue passignvalueNode1;
        {
        TAssign tassignNode2;
        PValue pvalueNode3;
        tassignNode2 = (TAssign)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        passignvalueNode1 = new AAssignValue(tassignNode2, pvalueNode3);
        }
	nodeList.add(passignvalueNode1);
        return nodeList;
    }



    ArrayList new13()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TIf tifNode3;
        PComparison pcomparisonNode4;
        TColon tcolonNode5;
        PStatement pstatementNode6;
        {
        }
        tifNode3 = (TIf)nodeArrayList1.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList2.get(0);
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        pstatementNode6 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AIfStatement(listNode2, tifNode3, pcomparisonNode4, tcolonNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new14()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TIf tifNode4;
        PComparison pcomparisonNode5;
        TColon tcolonNode6;
        PStatement pstatementNode7;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tifNode4 = (TIf)nodeArrayList2.get(0);
        pcomparisonNode5 = (PComparison)nodeArrayList3.get(0);
        tcolonNode6 = (TColon)nodeArrayList4.get(0);
        pstatementNode7 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(listNode3, tifNode4, pcomparisonNode5, tcolonNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new15()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TWhile twhileNode3;
        PComparison pcomparisonNode4;
        TColon tcolonNode5;
        PStatement pstatementNode6;
        {
        }
        twhileNode3 = (TWhile)nodeArrayList1.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList2.get(0);
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        pstatementNode6 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileStatement(listNode2, twhileNode3, pcomparisonNode4, tcolonNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new16()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TWhile twhileNode4;
        PComparison pcomparisonNode5;
        TColon tcolonNode6;
        PStatement pstatementNode7;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        twhileNode4 = (TWhile)nodeArrayList2.get(0);
        pcomparisonNode5 = (PComparison)nodeArrayList3.get(0);
        tcolonNode6 = (TColon)nodeArrayList4.get(0);
        pstatementNode7 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(listNode3, twhileNode4, pcomparisonNode5, tcolonNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new17()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TFor tforNode3;
        TIdentifier tidentifierNode4;
        TIn tinNode5;
        TIdentifier tidentifierNode6;
        TColon tcolonNode7;
        PStatement pstatementNode8;
        {
        }
        tforNode3 = (TFor)nodeArrayList1.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList2.get(0);
        tinNode5 = (TIn)nodeArrayList3.get(0);
        tidentifierNode6 = (TIdentifier)nodeArrayList4.get(0);
        tcolonNode7 = (TColon)nodeArrayList5.get(0);
        pstatementNode8 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AForStatement(listNode2, tforNode3, tidentifierNode4, tinNode5, tidentifierNode6, tcolonNode7, pstatementNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new18()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TFor tforNode4;
        TIdentifier tidentifierNode5;
        TIn tinNode6;
        TIdentifier tidentifierNode7;
        TColon tcolonNode8;
        PStatement pstatementNode9;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tforNode4 = (TFor)nodeArrayList2.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList3.get(0);
        tinNode6 = (TIn)nodeArrayList4.get(0);
        tidentifierNode7 = (TIdentifier)nodeArrayList5.get(0);
        tcolonNode8 = (TColon)nodeArrayList6.get(0);
        pstatementNode9 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AForStatement(listNode3, tforNode4, tidentifierNode5, tinNode6, tidentifierNode7, tcolonNode8, pstatementNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new19()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TReturn treturnNode3;
        PExpression pexpressionNode4;
        {
        }
        treturnNode3 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(listNode2, treturnNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new20()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TReturn treturnNode4;
        PExpression pexpressionNode5;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        treturnNode4 = (TReturn)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AReturnStatement(listNode3, treturnNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new21()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TPrint tprintNode3;
        PExpression pexpressionNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        {
        }
        tprintNode3 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(listNode2, tprintNode3, pexpressionNode4, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new22()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TPrint tprintNode4;
        PExpression pexpressionNode5;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tprintNode4 = (TPrint)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(listNode3, tprintNode4, pexpressionNode5, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new23()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TPrint tprintNode3;
        PExpression pexpressionNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        }
        tprintNode3 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new APrintStatement(listNode2, tprintNode3, pexpressionNode4, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new24()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TPrint tprintNode4;
        PExpression pexpressionNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tprintNode4 = (TPrint)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstatementNode1 = new APrintStatement(listNode3, tprintNode4, pexpressionNode5, listNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new25()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PAssignmentStatement passignmentstatementNode3;
        {
        }
        passignmentstatementNode3 = (PAssignmentStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AAssignmentStatement(listNode2, passignmentstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new26()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PAssignmentStatement passignmentstatementNode4;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        passignmentstatementNode4 = (PAssignmentStatement)nodeArrayList2.get(0);

        pstatementNode1 = new AAssignmentStatement(listNode3, passignmentstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new27()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TAssert tassertNode3;
        PExpression pexpressionNode4;
        Object nullNode5 = null;
        {
        }
        tassertNode3 = (TAssert)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AAssertStatement(listNode2, tassertNode3, pexpressionNode4, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new28()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TAssert tassertNode4;
        PExpression pexpressionNode5;
        Object nullNode6 = null;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tassertNode4 = (TAssert)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssertStatement(listNode3, tassertNode4, pexpressionNode5, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new29()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TAssert tassertNode3;
        PExpression pexpressionNode4;
        PCommaExpression pcommaexpressionNode5;
        {
        }
        tassertNode3 = (TAssert)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        pcommaexpressionNode5 = (PCommaExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssertStatement(listNode2, tassertNode3, pexpressionNode4, pcommaexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new30()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TAssert tassertNode4;
        PExpression pexpressionNode5;
        PCommaExpression pcommaexpressionNode6;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tassertNode4 = (TAssert)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        pcommaexpressionNode6 = (PCommaExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAssertStatement(listNode3, tassertNode4, pexpressionNode5, pcommaexpressionNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new31()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PFunctionCall pfunctioncallNode3;
        {
        }
        pfunctioncallNode3 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFuncCallStatement(listNode2, pfunctioncallNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new32()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PFunctionCall pfunctioncallNode4;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pfunctioncallNode4 = (PFunctionCall)nodeArrayList2.get(0);

        pstatementNode1 = new AFuncCallStatement(listNode3, pfunctioncallNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new33()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignmentStatement passignmentstatementNode1;
        {
        TIdentifier tidentifierNode2;
        TAssign tassignNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        passignmentstatementNode1 = new AAssignAssignmentStatement(tidentifierNode2, tassignNode3, pexpressionNode4);
        }
	nodeList.add(passignmentstatementNode1);
        return nodeList;
    }



    ArrayList new34()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignmentStatement passignmentstatementNode1;
        {
        TIdentifier tidentifierNode2;
        TMinusAssign tminusassignNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tminusassignNode3 = (TMinusAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        passignmentstatementNode1 = new AMinusAssignAssignmentStatement(tidentifierNode2, tminusassignNode3, pexpressionNode4);
        }
	nodeList.add(passignmentstatementNode1);
        return nodeList;
    }



    ArrayList new35()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignmentStatement passignmentstatementNode1;
        {
        TIdentifier tidentifierNode2;
        TDivAssign tdivassignNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tdivassignNode3 = (TDivAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        passignmentstatementNode1 = new ADivAssignAssignmentStatement(tidentifierNode2, tdivassignNode3, pexpressionNode4);
        }
	nodeList.add(passignmentstatementNode1);
        return nodeList;
    }



    ArrayList new36()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignmentStatement passignmentstatementNode1;
        {
        TIdentifier tidentifierNode2;
        TLBr tlbrNode3;
        PExpression pexpressionNode4;
        TRBr trbrNode5;
        TAssign tassignNode6;
        PExpression pexpressionNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlbrNode3 = (TLBr)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trbrNode5 = (TRBr)nodeArrayList4.get(0);
        tassignNode6 = (TAssign)nodeArrayList5.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList6.get(0);

        passignmentstatementNode1 = new AAssignListAssignmentStatement(tidentifierNode2, tlbrNode3, pexpressionNode4, trbrNode5, tassignNode6, pexpressionNode7);
        }
	nodeList.add(passignmentstatementNode1);
        return nodeList;
    }



    ArrayList new37()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PSum psumNode2;
        psumNode2 = (PSum)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpression(psumNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new38()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSum psumNode1;
        {
        PSum psumNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        psumNode2 = (PSum)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        psumNode1 = new ASumSum(psumNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(psumNode1);
        return nodeList;
    }



    ArrayList new39()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSum psumNode1;
        {
        PSum psumNode2;
        TMinus tminusNode3;
        PTerm ptermNode4;
        psumNode2 = (PSum)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        psumNode1 = new AMinusSum(psumNode2, tminusNode3, ptermNode4);
        }
	nodeList.add(psumNode1);
        return nodeList;
    }



    ArrayList new40()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSum psumNode1;
        {
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        psumNode1 = new ATermSum(ptermNode2);
        }
	nodeList.add(psumNode1);
        return nodeList;
    }



    ArrayList new41()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTerm ptermNode1;
        {
        PTerm ptermNode2;
        TMult tmultNode3;
        PPower ppowerNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        ppowerNode4 = (PPower)nodeArrayList3.get(0);

        ptermNode1 = new AMultTerm(ptermNode2, tmultNode3, ppowerNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    ArrayList new42()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTerm ptermNode1;
        {
        PTerm ptermNode2;
        TDiv tdivNode3;
        PPower ppowerNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        ppowerNode4 = (PPower)nodeArrayList3.get(0);

        ptermNode1 = new ADivTerm(ptermNode2, tdivNode3, ppowerNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    ArrayList new43()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTerm ptermNode1;
        {
        PTerm ptermNode2;
        TMode tmodeNode3;
        PPower ppowerNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmodeNode3 = (TMode)nodeArrayList2.get(0);
        ppowerNode4 = (PPower)nodeArrayList3.get(0);

        ptermNode1 = new AModuloTerm(ptermNode2, tmodeNode3, ppowerNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    ArrayList new44()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTerm ptermNode1;
        {
        PPower ppowerNode2;
        ppowerNode2 = (PPower)nodeArrayList1.get(0);

        ptermNode1 = new APowerTerm(ppowerNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    ArrayList new45()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPower ppowerNode1;
        {
        PPower ppowerNode2;
        TDmult tdmultNode3;
        PSubscription psubscriptionNode4;
        ppowerNode2 = (PPower)nodeArrayList1.get(0);
        tdmultNode3 = (TDmult)nodeArrayList2.get(0);
        psubscriptionNode4 = (PSubscription)nodeArrayList3.get(0);

        ppowerNode1 = new AExpPower(ppowerNode2, tdmultNode3, psubscriptionNode4);
        }
	nodeList.add(ppowerNode1);
        return nodeList;
    }



    ArrayList new46()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPower ppowerNode1;
        {
        PSubscription psubscriptionNode2;
        psubscriptionNode2 = (PSubscription)nodeArrayList1.get(0);

        ppowerNode1 = new ASubscriptionPower(psubscriptionNode2);
        }
	nodeList.add(ppowerNode1);
        return nodeList;
    }



    ArrayList new47()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSubscription psubscriptionNode1;
        {
        TIdentifier tidentifierNode2;
        TLBr tlbrNode3;
        PExpression pexpressionNode4;
        TRBr trbrNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlbrNode3 = (TLBr)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trbrNode5 = (TRBr)nodeArrayList4.get(0);

        psubscriptionNode1 = new ASubscriptionSubscription(tidentifierNode2, tlbrNode3, pexpressionNode4, trbrNode5);
        }
	nodeList.add(psubscriptionNode1);
        return nodeList;
    }



    ArrayList new48()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSubscription psubscriptionNode1;
        {
        PFunc pfuncNode2;
        pfuncNode2 = (PFunc)nodeArrayList1.get(0);

        psubscriptionNode1 = new AFuncSubscription(pfuncNode2);
        }
	nodeList.add(psubscriptionNode1);
        return nodeList;
    }



    ArrayList new49()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunc pfuncNode1;
        {
        TOpen topenNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TComma tcommaNode5;
        PExpression pexpressionNode6;
        TRPar trparNode7;
        topenNode2 = (TOpen)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        pfuncNode1 = new AOpenFunc(topenNode2, tlparNode3, pexpressionNode4, tcommaNode5, pexpressionNode6, trparNode7);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    ArrayList new50()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunc pfuncNode1;
        {
        TType ttypeNode2;
        TLPar tlparNode3;
        TIdentifier tidentifierNode4;
        TRPar trparNode5;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncNode1 = new ATypeFunc(ttypeNode2, tlparNode3, tidentifierNode4, trparNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    ArrayList new51()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunc pfuncNode1;
        {
        TMax tmaxNode2;
        TLPar tlparNode3;
        PValue pvalueNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TRPar trparNode7;
        tmaxNode2 = (TMax)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trparNode7 = (TRPar)nodeArrayList5.get(0);

        pfuncNode1 = new AMaxFunc(tmaxNode2, tlparNode3, pvalueNode4, listNode6, trparNode7);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    ArrayList new52()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunc pfuncNode1;
        {
        TMin tminNode2;
        TLPar tlparNode3;
        PValue pvalueNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TRPar trparNode7;
        tminNode2 = (TMin)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trparNode7 = (TRPar)nodeArrayList5.get(0);

        pfuncNode1 = new AMinFunc(tminNode2, tlparNode3, pvalueNode4, listNode6, trparNode7);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    ArrayList new53()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunc pfuncNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pfuncNode1 = new AFuncFunc(pfunctioncallNode2);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    ArrayList new54()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunc pfuncNode1;
        {
        PPar pparNode2;
        pparNode2 = (PPar)nodeArrayList1.get(0);

        pfuncNode1 = new AParFunc(pparNode2);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    ArrayList new55()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunc pfuncNode1;
        {
        TLBr tlbrNode2;
        PExpression pexpressionNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TRBr trbrNode5;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        {
        }
        trbrNode5 = (TRBr)nodeArrayList3.get(0);

        pfuncNode1 = new AListDefFunc(tlbrNode2, pexpressionNode3, listNode4, trbrNode5);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    ArrayList new56()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunc pfuncNode1;
        {
        TLBr tlbrNode2;
        PExpression pexpressionNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TRBr trbrNode6;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbrNode6 = (TRBr)nodeArrayList4.get(0);

        pfuncNode1 = new AListDefFunc(tlbrNode2, pexpressionNode3, listNode5, trbrNode6);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    ArrayList new57()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommaValue pcommavalueNode1;
        {
        TComma tcommaNode2;
        PValue pvalueNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        pcommavalueNode1 = new ACommaValue(tcommaNode2, pvalueNode3);
        }
	nodeList.add(pcommavalueNode1);
        return nodeList;
    }



    ArrayList new58()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPar pparNode1;
        {
        TLPar tlparNode2;
        PExpression pexpressionNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pparNode1 = new AParPar(tlparNode2, pexpressionNode3, trparNode4);
        }
	nodeList.add(pparNode1);
        return nodeList;
    }



    ArrayList new59()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPar pparNode1;
        {
        PSomething psomethingNode2;
        psomethingNode2 = (PSomething)nodeArrayList1.get(0);

        pparNode1 = new ASomethingPar(psomethingNode2);
        }
	nodeList.add(pparNode1);
        return nodeList;
    }



    ArrayList new60()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSomething psomethingNode1;
        {
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        psomethingNode1 = new AValueSomething(pvalueNode2);
        }
	nodeList.add(psomethingNode1);
        return nodeList;
    }



    ArrayList new61()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSomething psomethingNode1;
        {
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        psomethingNode1 = new AIdentifierSomething(tidentifierNode2);
        }
	nodeList.add(psomethingNode1);
        return nodeList;
    }



    ArrayList new62()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PDisjunction pdisjunctionNode2;
        pdisjunctionNode2 = (PDisjunction)nodeArrayList1.get(0);

        pcomparisonNode1 = new AComparison(pdisjunctionNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new63()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PDisjunction pdisjunctionNode1;
        {
        PDisjunction pdisjunctionNode2;
        TOr torNode3;
        PConjuction pconjuctionNode4;
        pdisjunctionNode2 = (PDisjunction)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pconjuctionNode4 = (PConjuction)nodeArrayList3.get(0);

        pdisjunctionNode1 = new AOrDisjunction(pdisjunctionNode2, torNode3, pconjuctionNode4);
        }
	nodeList.add(pdisjunctionNode1);
        return nodeList;
    }



    ArrayList new64()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PDisjunction pdisjunctionNode1;
        {
        PConjuction pconjuctionNode2;
        pconjuctionNode2 = (PConjuction)nodeArrayList1.get(0);

        pdisjunctionNode1 = new AAndDisjunction(pconjuctionNode2);
        }
	nodeList.add(pdisjunctionNode1);
        return nodeList;
    }



    ArrayList new65()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PConjuction pconjuctionNode1;
        {
        PConjuction pconjuctionNode2;
        TAnd tandNode3;
        PNegated pnegatedNode4;
        pconjuctionNode2 = (PConjuction)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pnegatedNode4 = (PNegated)nodeArrayList3.get(0);

        pconjuctionNode1 = new AAndConjuction(pconjuctionNode2, tandNode3, pnegatedNode4);
        }
	nodeList.add(pconjuctionNode1);
        return nodeList;
    }



    ArrayList new66()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PConjuction pconjuctionNode1;
        {
        PNegated pnegatedNode2;
        pnegatedNode2 = (PNegated)nodeArrayList1.get(0);

        pconjuctionNode1 = new ANotConjuction(pnegatedNode2);
        }
	nodeList.add(pconjuctionNode1);
        return nodeList;
    }



    ArrayList new67()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PNegated pnegatedNode1;
        {
        TNot tnotNode2;
        PClause pclauseNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pclauseNode3 = (PClause)nodeArrayList2.get(0);

        pnegatedNode1 = new ANegatedNegated(tnotNode2, pclauseNode3);
        }
	nodeList.add(pnegatedNode1);
        return nodeList;
    }



    ArrayList new68()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PNegated pnegatedNode1;
        {
        PClause pclauseNode2;
        pclauseNode2 = (PClause)nodeArrayList1.get(0);

        pnegatedNode1 = new AClauseNegated(pclauseNode2);
        }
	nodeList.add(pnegatedNode1);
        return nodeList;
    }



    ArrayList new69()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClause pclauseNode1;
        {
        PExpression pexpressionNode2;
        TGreat tgreatNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tgreatNode3 = (TGreat)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pclauseNode1 = new AGreatClause(pexpressionNode2, tgreatNode3, pexpressionNode4);
        }
	nodeList.add(pclauseNode1);
        return nodeList;
    }



    ArrayList new70()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClause pclauseNode1;
        {
        PExpression pexpressionNode2;
        TLess tlessNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tlessNode3 = (TLess)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pclauseNode1 = new ALessClause(pexpressionNode2, tlessNode3, pexpressionNode4);
        }
	nodeList.add(pclauseNode1);
        return nodeList;
    }



    ArrayList new71()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClause pclauseNode1;
        {
        PExpression pexpressionNode2;
        TLeq tleqNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tleqNode3 = (TLeq)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pclauseNode1 = new ALeqClause(pexpressionNode2, tleqNode3, pexpressionNode4);
        }
	nodeList.add(pclauseNode1);
        return nodeList;
    }



    ArrayList new72()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClause pclauseNode1;
        {
        PExpression pexpressionNode2;
        TGeq tgeqNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tgeqNode3 = (TGeq)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pclauseNode1 = new AGeqClause(pexpressionNode2, tgeqNode3, pexpressionNode4);
        }
	nodeList.add(pclauseNode1);
        return nodeList;
    }



    ArrayList new73()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClause pclauseNode1;
        {
        PExpression pexpressionNode2;
        TNeq tneqNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tneqNode3 = (TNeq)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pclauseNode1 = new ANeqClause(pexpressionNode2, tneqNode3, pexpressionNode4);
        }
	nodeList.add(pclauseNode1);
        return nodeList;
    }



    ArrayList new74()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClause pclauseNode1;
        {
        PExpression pexpressionNode2;
        TEq teqNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pclauseNode1 = new AEqClause(pexpressionNode2, teqNode3, pexpressionNode4);
        }
	nodeList.add(pclauseNode1);
        return nodeList;
    }



    ArrayList new75()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClause pclauseNode1;
        {
        PBooleanLiteral pbooleanliteralNode2;
        pbooleanliteralNode2 = (PBooleanLiteral)nodeArrayList1.get(0);

        pclauseNode1 = new ALiteralClause(pbooleanliteralNode2);
        }
	nodeList.add(pclauseNode1);
        return nodeList;
    }



    ArrayList new76()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PBooleanLiteral pbooleanliteralNode1;
        {
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pbooleanliteralNode1 = new ATrueBooleanLiteral(ttrueNode2);
        }
	nodeList.add(pbooleanliteralNode1);
        return nodeList;
    }



    ArrayList new77()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PBooleanLiteral pbooleanliteralNode1;
        {
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pbooleanliteralNode1 = new AFalseBooleanLiteral(tfalseNode2);
        }
	nodeList.add(pbooleanliteralNode1);
        return nodeList;
    }



    ArrayList new78()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TIdentifier tidentifierNode2;
        TDot tdotNode3;
        PFunctionCall pfunctioncallNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pfunctioncallNode4 = (PFunctionCall)nodeArrayList3.get(0);

        pvalueNode1 = new AFunCallValue(tidentifierNode2, tdotNode3, pfunctioncallNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new79()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        PNumber pnumberNode2;
        pnumberNode2 = (PNumber)nodeArrayList1.get(0);

        pvalueNode1 = new ANumValue(pnumberNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new80()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pvalueNode1 = new AStringValue(tstringliteralNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new81()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TNone tnoneNode2;
        tnoneNode2 = (TNone)nodeArrayList1.get(0);

        pvalueNode1 = new ANoneValue(tnoneNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new82()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PNumber pnumberNode1;
        {
        TIntegerLiteral tintegerliteralNode2;
        tintegerliteralNode2 = (TIntegerLiteral)nodeArrayList1.get(0);

        pnumberNode1 = new ANumber(tintegerliteralNode2);
        }
	nodeList.add(pnumberNode1);
        return nodeList;
    }



    ArrayList new83()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        Object nullNode4 = null;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pfunctioncallNode1 = new AFunctionCall(tidentifierNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new84()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        PArglist parglistNode4;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        parglistNode4 = (PArglist)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunctioncallNode1 = new AFunctionCall(tidentifierNode2, tlparNode3, parglistNode4, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new85()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        }

        parglistNode1 = new AArglist(pexpressionNode2, listNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new86()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parglistNode1 = new AArglist(pexpressionNode2, listNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new87()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommaExpression pcommaexpressionNode1;
        {
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pcommaexpressionNode1 = new ACommaExpression(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pcommaexpressionNode1);
        return nodeList;
    }



    ArrayList new88()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommand pcommandNode1;
        pcommandNode1 = (PCommand)nodeArrayList1.get(0);
	if(pcommandNode1 != null)
	{
	  listNode2.add(pcommandNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new89()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommand pcommandNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommandNode2 = (PCommand)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommandNode2 != null)
	{
	  listNode3.add(pcommandNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new90()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommaIdAssignValue pcommaidassignvalueNode1;
        pcommaidassignvalueNode1 = (PCommaIdAssignValue)nodeArrayList1.get(0);
	if(pcommaidassignvalueNode1 != null)
	{
	  listNode2.add(pcommaidassignvalueNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new91()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommaIdAssignValue pcommaidassignvalueNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommaidassignvalueNode2 = (PCommaIdAssignValue)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaidassignvalueNode2 != null)
	{
	  listNode3.add(pcommaidassignvalueNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new92()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        TTab ttabNode1;
        ttabNode1 = (TTab)nodeArrayList1.get(0);
	if(ttabNode1 != null)
	{
	  listNode2.add(ttabNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new93()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        TTab ttabNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        ttabNode2 = (TTab)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ttabNode2 != null)
	{
	  listNode3.add(ttabNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new94()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommaExpression pcommaexpressionNode1;
        pcommaexpressionNode1 = (PCommaExpression)nodeArrayList1.get(0);
	if(pcommaexpressionNode1 != null)
	{
	  listNode2.add(pcommaexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new95()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommaExpression pcommaexpressionNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommaexpressionNode2 = (PCommaExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaexpressionNode2 != null)
	{
	  listNode3.add(pcommaexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new96()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommaValue pcommavalueNode1;
        pcommavalueNode1 = (PCommaValue)nodeArrayList1.get(0);
	if(pcommavalueNode1 != null)
	{
	  listNode2.add(pcommavalueNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new97()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommaValue pcommavalueNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommavalueNode2 = (PCommaValue)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommavalueNode2 != null)
	{
	  listNode3.add(pcommavalueNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {33, SHIFT, 8}, {49, SHIFT, 9}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 2}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {41, SHIFT, 25}, {42, SHIFT, 26}, {45, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 3}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {41, SHIFT, 25}, {42, SHIFT, 26}, {45, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 4}, {49, SHIFT, 49}, },
			{{-1, ERROR, 5}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 6}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 7}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 8}, {49, SHIFT, 53}, },
			{{-1, ERROR, 9}, {1, SHIFT, 54}, {2, SHIFT, 55}, {3, SHIFT, 56}, {5, SHIFT, 57}, {7, SHIFT, 58}, },
			{{-1, ERROR, 10}, {51, ACCEPT, -1}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {33, SHIFT, 8}, {49, SHIFT, 9}, },
			{{-1, ERROR, 17}, {0, SHIFT, 60}, {19, SHIFT, 61}, {23, SHIFT, 62}, {24, SHIFT, 63}, {25, SHIFT, 64}, {26, SHIFT, 65}, {31, SHIFT, 66}, {49, SHIFT, 9}, },
			{{-1, ERROR, 18}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 19}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 20}, {5, SHIFT, 71}, },
			{{-1, ERROR, 21}, {5, SHIFT, 72}, },
			{{-1, ERROR, 22}, {5, SHIFT, 73}, },
			{{-1, ERROR, 23}, {5, SHIFT, 74}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 27}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {41, SHIFT, 25}, {42, SHIFT, 26}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 61}, {5, SHIFT, 57}, {7, SHIFT, 76}, {12, SHIFT, 77}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 31}, {35, SHIFT, 78}, {36, SHIFT, 79}, {37, SHIFT, 80}, {38, SHIFT, 81}, {39, SHIFT, 82}, {40, SHIFT, 83}, },
			{{-1, REDUCE, 37}, {13, SHIFT, 84}, {14, SHIFT, 85}, },
			{{-1, REDUCE, 40}, {15, SHIFT, 86}, {16, SHIFT, 87}, {17, SHIFT, 88}, },
			{{-1, REDUCE, 44}, {18, SHIFT, 89}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 39}, {46, SHIFT, 90}, },
			{{-1, REDUCE, 62}, {44, SHIFT, 91}, },
			{{-1, REDUCE, 64}, {43, SHIFT, 92}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 48}, {46, SHIFT, 93}, },
			{{-1, ERROR, 49}, {20, SHIFT, 94}, },
			{{-1, REDUCE, 21}, {9, SHIFT, 95}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 27}, {9, SHIFT, 95}, },
			{{-1, ERROR, 53}, {5, SHIFT, 99}, },
			{{-1, ERROR, 54}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 55}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 56}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 57}, {5, SHIFT, 18}, {6, SHIFT, 103}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 58}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 61}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {41, SHIFT, 25}, {42, SHIFT, 26}, {45, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 62}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {41, SHIFT, 25}, {42, SHIFT, 26}, {45, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 63}, {49, SHIFT, 109}, },
			{{-1, ERROR, 64}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 65}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 66}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 69}, {6, SHIFT, 113}, },
			{{-1, ERROR, 70}, {8, SHIFT, 114}, {9, SHIFT, 95}, },
			{{-1, ERROR, 71}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 72}, {49, SHIFT, 117}, },
			{{-1, ERROR, 73}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 118}, {50, SHIFT, 30}, },
			{{-1, ERROR, 74}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 118}, {50, SHIFT, 30}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 76}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 77}, {49, SHIFT, 122}, },
			{{-1, ERROR, 78}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 79}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 80}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 81}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 82}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 83}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 84}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 85}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 86}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 87}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 88}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 89}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 90}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {49, SHIFT, 9}, },
			{{-1, ERROR, 91}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {41, SHIFT, 25}, {42, SHIFT, 26}, {45, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 92}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {41, SHIFT, 25}, {42, SHIFT, 26}, {45, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 93}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {49, SHIFT, 9}, },
			{{-1, ERROR, 94}, {49, SHIFT, 140}, },
			{{-1, ERROR, 95}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 23}, {9, SHIFT, 95}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 99}, {6, SHIFT, 143}, {49, SHIFT, 144}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 85}, {9, SHIFT, 95}, },
			{{-1, ERROR, 105}, {6, SHIFT, 147}, },
			{{-1, ERROR, 106}, {8, SHIFT, 148}, },
			{{-1, ERROR, 107}, {46, SHIFT, 149}, },
			{{-1, ERROR, 108}, {46, SHIFT, 150}, },
			{{-1, ERROR, 109}, {20, SHIFT, 151}, },
			{{-1, REDUCE, 22}, {9, SHIFT, 95}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 28}, {9, SHIFT, 95}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 115}, {8, SHIFT, 154}, {9, SHIFT, 95}, },
			{{-1, ERROR, 116}, {9, SHIFT, 155}, },
			{{-1, ERROR, 117}, {6, SHIFT, 156}, },
			{{-1, ERROR, 118}, {12, SHIFT, 77}, },
			{{-1, ERROR, 119}, {9, SHIFT, 157}, },
			{{-1, ERROR, 120}, {9, SHIFT, 157}, },
			{{-1, ERROR, 121}, {8, SHIFT, 161}, },
			{{-1, ERROR, 122}, {5, SHIFT, 57}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 38}, {15, SHIFT, 86}, {16, SHIFT, 87}, {17, SHIFT, 88}, },
			{{-1, REDUCE, 39}, {15, SHIFT, 86}, {16, SHIFT, 87}, {17, SHIFT, 88}, },
			{{-1, REDUCE, 41}, {18, SHIFT, 89}, },
			{{-1, REDUCE, 42}, {18, SHIFT, 89}, },
			{{-1, REDUCE, 43}, {18, SHIFT, 89}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 63}, {43, SHIFT, 92}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 140}, {46, SHIFT, 162}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 143}, {46, SHIFT, 163}, },
			{{-1, REDUCE, 6}, {1, SHIFT, 164}, {9, SHIFT, 165}, },
			{{-1, ERROR, 145}, {6, SHIFT, 169}, },
			{{-1, REDUCE, 86}, {9, SHIFT, 95}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 148}, {1, SHIFT, 170}, },
			{{-1, ERROR, 149}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {49, SHIFT, 9}, },
			{{-1, ERROR, 150}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {49, SHIFT, 9}, },
			{{-1, ERROR, 151}, {49, SHIFT, 173}, },
			{{-1, REDUCE, 24}, {9, SHIFT, 95}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 155}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 157}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 118}, {50, SHIFT, 30}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 159}, {6, SHIFT, 176}, {9, SHIFT, 157}, },
			{{-1, ERROR, 160}, {6, SHIFT, 178}, {9, SHIFT, 157}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 162}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {49, SHIFT, 9}, },
			{{-1, ERROR, 163}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {49, SHIFT, 9}, },
			{{-1, ERROR, 164}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 118}, {50, SHIFT, 30}, },
			{{-1, ERROR, 165}, {49, SHIFT, 182}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 7}, {9, SHIFT, 165}, },
			{{-1, REDUCE, 8}, {9, SHIFT, 165}, },
			{{-1, ERROR, 169}, {46, SHIFT, 185}, },
			{{-1, ERROR, 170}, {5, SHIFT, 18}, {7, SHIFT, 19}, {27, SHIFT, 20}, {28, SHIFT, 21}, {29, SHIFT, 22}, {30, SHIFT, 23}, {34, SHIFT, 24}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 173}, {46, SHIFT, 187}, },
			{{-1, ERROR, 174}, {6, SHIFT, 188}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 10}, {1, SHIFT, 164}, },
			{{-1, REDUCE, 9}, {9, SHIFT, 165}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 185}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {49, SHIFT, 9}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 187}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {49, SHIFT, 9}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 18}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 10}, },
			{{-1, 11}, {16, 59}, },
			{{-1, 12}, },
			{{-1, 145}, },
			{{-1, 166}, {168, 184}, {183, 184}, },
			{{-1, 167}, {182, 189}, },
			{{-1, 13}, {90, 136}, {93, 139}, {149, 171}, {150, 172}, {162, 179}, {163, 180}, {185, 190}, {187, 191}, },
			{{-1, 14}, {17, 67}, },
			{{-1, 31}, {5, 50}, {6, 51}, {7, 52}, {18, 69}, {19, 70}, {54, 100}, {55, 101}, {56, 102}, {57, 104}, {58, 106}, {64, 110}, {65, 111}, {66, 112}, {71, 116}, {76, 121}, {78, 124}, {79, 125}, {80, 126}, {81, 127}, {82, 128}, {83, 129}, {95, 141}, {155, 174}, {170, 186}, },
			{{-1, 32}, },
			{{-1, 33}, {84, 130}, {85, 131}, },
			{{-1, 34}, {86, 132}, {87, 133}, {88, 134}, },
			{{-1, 35}, {89, 135}, },
			{{-1, 36}, },
			{{-1, 158}, {159, 177}, {160, 177}, },
			{{-1, 37}, },
			{{-1, 38}, },
			{{-1, 39}, {3, 48}, {61, 107}, {62, 108}, },
			{{-1, 40}, },
			{{-1, 41}, {91, 137}, },
			{{-1, 42}, {92, 138}, },
			{{-1, 43}, {27, 75}, },
			{{-1, 44}, },
			{{-1, 45}, {73, 119}, {74, 120}, {157, 175}, {164, 181}, },
			{{-1, 46}, },
			{{-1, 47}, {0, 15}, {16, 15}, {17, 68}, {77, 123}, {90, 15}, {93, 15}, {149, 15}, {150, 15}, {162, 15}, {163, 15}, {185, 15}, {187, 15}, },
			{{-1, 105}, },
			{{-1, 96}, {52, 98}, {97, 142}, {112, 153}, {115, 142}, {146, 142}, {152, 142}, },
			{{-1, 16}, },
			{{-1, 168}, {167, 183}, },
			{{-1, 17}, },
			{{-1, 97}, {70, 115}, {104, 146}, {110, 152}, },
			{{-1, 159}, {120, 160}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: tab, 'if', 'while', 'for', 'print', 'return', 'assert', 'def', identifier, EOF",
			"expecting: tab, 'if', 'while', 'for', 'print', 'return', 'assert', identifier",
			"expecting: '(', '[', 'open', 'type', 'max', 'min', 'None', 'true', 'false', 'not', integer literal, identifier, string literal",
			"expecting: identifier",
			"expecting: '(', '[', 'open', 'type', 'max', 'min', 'None', integer literal, identifier, string literal",
			"expecting: '=', '-=', '/=', '(', '['",
			"expecting: EOF",
			"expecting: '('",
			"expecting: tab, ')', ']', ',', '+', '-', '*', '/', '%', '**', 'if', 'while', 'for', 'print', 'return', 'assert', 'def', '<=', '<', '>=', '>', '!=', '==', 'and', 'or', ':', identifier, EOF",
			"expecting: 'and', 'or', ':'",
			"expecting: '(', '[', 'open', 'type', 'max', 'min', 'None', 'true', 'false', integer literal, identifier, string literal",
			"expecting: tab, '(', ')', '[', ']', ',', '.', '+', '-', '*', '/', '%', '**', 'if', 'while', 'for', 'print', 'return', 'assert', 'def', '<=', '<', '>=', '>', '!=', '==', 'and', 'or', ':', identifier, EOF",
			"expecting: '<=', '<', '>=', '>', '!=', '=='",
			"expecting: tab, ')', ']', ',', '+', '-', 'if', 'while', 'for', 'print', 'return', 'assert', 'def', '<=', '<', '>=', '>', '!=', '==', 'and', 'or', ':', identifier, EOF",
			"expecting: tab, ')', ']', ',', '+', '-', '*', '/', '%', 'if', 'while', 'for', 'print', 'return', 'assert', 'def', '<=', '<', '>=', '>', '!=', '==', 'and', 'or', ':', identifier, EOF",
			"expecting: ':'",
			"expecting: 'or', ':'",
			"expecting: 'in'",
			"expecting: tab, ',', 'if', 'while', 'for', 'print', 'return', 'assert', 'def', identifier, EOF",
			"expecting: '(', ')', '[', 'open', 'type', 'max', 'min', 'None', integer literal, identifier, string literal",
			"expecting: ')'",
			"expecting: ']', ','",
			"expecting: 'None', integer literal, identifier, string literal",
			"expecting: tab, ')', ']', ',', 'if', 'while', 'for', 'print', 'return', 'assert', 'def', identifier, EOF",
			"expecting: ')', identifier",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: ','",
			"expecting: '.'",
			"expecting: '=', ')', ','",
			"expecting: '='",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 4, 4, 3, 5, 6, 0, 0, 0, 0, 0, 0, 1, 4, 4, 7, 7, 7, 7, 8, 9, 9, 10, 8, 11, 8, 12, 13, 14, 8, 8, 8, 8, 8, 15, 16, 9, 9, 9, 9, 8, 8, 8, 15, 17, 18, 0, 18, 7, 4, 4, 4, 19, 4, 0, 1, 2, 2, 3, 4, 4, 4, 0, 0, 20, 21, 4, 3, 22, 22, 9, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 3, 4, 23, 18, 0, 24, 0, 0, 0, 8, 25, 20, 26, 15, 15, 17, 18, 0, 18, 8, 8, 21, 27, 20, 28, 27, 27, 26, 7, 8, 9, 9, 9, 9, 9, 9, 14, 14, 8, 8, 8, 8, 0, 9, 9, 0, 15, 23, 23, 15, 29, 20, 25, 8, 30, 1, 1, 3, 18, 0, 8, 4, 8, 22, 25, 25, 25, 8, 1, 1, 22, 3, 25, 25, 25, 15, 4, 0, 0, 15, 20, 25, 8, 25, 8, 0, 0, 25, 29, 25, 25, 1, 0, 1, 8, 25, 0, 0, 
        };*/
}
