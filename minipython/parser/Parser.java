/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.parser;

import minipython.lexer.*;
import minipython.node.*;
import minipython.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {

                    case 0:
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;


                    case 1:
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;


                    case 2:
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;


                    case 3:
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;


                    case 4:
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;


                    case 5:
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;


                    case 6:
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;


                    case 7:
		    {
			ArrayList list = new7();
			push(goTo(3), list);
		    }
		    break;


                    case 8:
		    {
			ArrayList list = new8();
			push(goTo(3), list);
		    }
		    break;


                    case 9:
		    {
			ArrayList list = new9();
			push(goTo(3), list);
		    }
		    break;


                    case 10:
		    {
			ArrayList list = new10();
			push(goTo(4), list);
		    }
		    break;


                    case 11:
		    {
			ArrayList list = new11();
			push(goTo(4), list);
		    }
		    break;


                    case 12:
		    {
			ArrayList list = new12();
			push(goTo(5), list);
		    }
		    break;


                    case 13:
		    {
			ArrayList list = new13();
			push(goTo(6), list);
		    }
		    break;


                    case 14:
		    {
			ArrayList list = new14();
			push(goTo(6), list);
		    }
		    break;


                    case 15:
		    {
			ArrayList list = new15();
			push(goTo(6), list);
		    }
		    break;


                    case 16:
		    {
			ArrayList list = new16();
			push(goTo(6), list);
		    }
		    break;


                    case 17:
		    {
			ArrayList list = new17();
			push(goTo(6), list);
		    }
		    break;


                    case 18:
		    {
			ArrayList list = new18();
			push(goTo(6), list);
		    }
		    break;


                    case 19:
		    {
			ArrayList list = new19();
			push(goTo(6), list);
		    }
		    break;


                    case 20:
		    {
			ArrayList list = new20();
			push(goTo(6), list);
		    }
		    break;


                    case 21:
		    {
			ArrayList list = new21();
			push(goTo(6), list);
		    }
		    break;


                    case 22:
		    {
			ArrayList list = new22();
			push(goTo(6), list);
		    }
		    break;


                    case 23:
		    {
			ArrayList list = new23();
			push(goTo(6), list);
		    }
		    break;


                    case 24:
		    {
			ArrayList list = new24();
			push(goTo(6), list);
		    }
		    break;


                    case 25:
		    {
			ArrayList list = new25();
			push(goTo(6), list);
		    }
		    break;


                    case 26:
		    {
			ArrayList list = new26();
			push(goTo(6), list);
		    }
		    break;


                    case 27:
		    {
			ArrayList list = new27();
			push(goTo(6), list);
		    }
		    break;


                    case 28:
		    {
			ArrayList list = new28();
			push(goTo(6), list);
		    }
		    break;


                    case 29:
		    {
			ArrayList list = new29();
			push(goTo(6), list);
		    }
		    break;


                    case 30:
		    {
			ArrayList list = new30();
			push(goTo(6), list);
		    }
		    break;


                    case 31:
		    {
			ArrayList list = new31();
			push(goTo(6), list);
		    }
		    break;


                    case 32:
		    {
			ArrayList list = new32();
			push(goTo(7), list);
		    }
		    break;


                    case 33:
		    {
			ArrayList list = new33();
			push(goTo(7), list);
		    }
		    break;


                    case 34:
		    {
			ArrayList list = new34();
			push(goTo(7), list);
		    }
		    break;


                    case 35:
		    {
			ArrayList list = new35();
			push(goTo(7), list);
		    }
		    break;


                    case 36:
		    {
			ArrayList list = new36();
			push(goTo(8), list);
		    }
		    break;


                    case 37:
		    {
			ArrayList list = new37();
			push(goTo(9), list);
		    }
		    break;


                    case 38:
		    {
			ArrayList list = new38();
			push(goTo(9), list);
		    }
		    break;


                    case 39:
		    {
			ArrayList list = new39();
			push(goTo(9), list);
		    }
		    break;


                    case 40:
		    {
			ArrayList list = new40();
			push(goTo(10), list);
		    }
		    break;


                    case 41:
		    {
			ArrayList list = new41();
			push(goTo(11), list);
		    }
		    break;


                    case 42:
		    {
			ArrayList list = new42();
			push(goTo(12), list);
		    }
		    break;


                    case 43:
		    {
			ArrayList list = new43();
			push(goTo(12), list);
		    }
		    break;


                    case 44:
		    {
			ArrayList list = new44();
			push(goTo(12), list);
		    }
		    break;


                    case 45:
		    {
			ArrayList list = new45();
			push(goTo(13), list);
		    }
		    break;


                    case 46:
		    {
			ArrayList list = new46();
			push(goTo(14), list);
		    }
		    break;


                    case 47:
		    {
			ArrayList list = new47();
			push(goTo(14), list);
		    }
		    break;


                    case 48:
		    {
			ArrayList list = new48();
			push(goTo(15), list);
		    }
		    break;


                    case 49:
		    {
			ArrayList list = new49();
			push(goTo(15), list);
		    }
		    break;


                    case 50:
		    {
			ArrayList list = new50();
			push(goTo(16), list);
		    }
		    break;


                    case 51:
		    {
			ArrayList list = new51();
			push(goTo(17), list);
		    }
		    break;


                    case 52:
		    {
			ArrayList list = new52();
			push(goTo(17), list);
		    }
		    break;


                    case 53:
		    {
			ArrayList list = new53();
			push(goTo(18), list);
		    }
		    break;


                    case 54:
		    {
			ArrayList list = new54();
			push(goTo(18), list);
		    }
		    break;


                    case 55:
		    {
			ArrayList list = new55();
			push(goTo(19), list);
		    }
		    break;


                    case 56:
		    {
			ArrayList list = new56();
			push(goTo(19), list);
		    }
		    break;


                    case 57:
		    {
			ArrayList list = new57();
			push(goTo(20), list);
		    }
		    break;


                    case 58:
		    {
			ArrayList list = new58();
			push(goTo(20), list);
		    }
		    break;

                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PGoal node1 = (PGoal) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0()
    {
        ArrayList nodeList = new ArrayList();

        PGoal pgoalNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        }

        pgoalNode1 = new AGoal(listNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new1()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGoal pgoalNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pgoalNode1 = new AGoal(listNode3);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new2()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommand pcommandNode1;
        {
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pcommandNode1 = new AFuncCommand(pfunctionNode2);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    ArrayList new3()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommand pcommandNode1;
        {
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pcommandNode1 = new AStatementCommand(pstatementNode2);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    ArrayList new4()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TDef tdefNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        Object nullNode5 = null;
        TRPar trparNode6;
        TColon tcolonNode7;
        PStatement pstatementNode8;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tcolonNode7 = (TColon)nodeArrayList5.get(0);
        pstatementNode8 = (PStatement)nodeArrayList6.get(0);

        pfunctionNode1 = new AFunction(tdefNode2, tidentifierNode3, tlparNode4, null, trparNode6, tcolonNode7, pstatementNode8);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new5()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TDef tdefNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        PArgument pargumentNode5;
        TRPar trparNode6;
        TColon tcolonNode7;
        PStatement pstatementNode8;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pargumentNode5 = (PArgument)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tcolonNode7 = (TColon)nodeArrayList6.get(0);
        pstatementNode8 = (PStatement)nodeArrayList7.get(0);

        pfunctionNode1 = new AFunction(tdefNode2, tidentifierNode3, tlparNode4, pargumentNode5, trparNode6, tcolonNode7, pstatementNode8);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new6()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
        }

        pargumentNode1 = new AArgument(tidentifierNode2, null, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new7()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        PAssignValue passignvalueNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        passignvalueNode3 = (PAssignValue)nodeArrayList2.get(0);
        {
        }

        pargumentNode1 = new AArgument(tidentifierNode2, passignvalueNode3, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new8()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgument(tidentifierNode2, null, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new9()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        PAssignValue passignvalueNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        passignvalueNode3 = (PAssignValue)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgument(tidentifierNode2, passignvalueNode3, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new10()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommaIdAssignValue pcommaidassignvalueNode1;
        {
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pcommaidassignvalueNode1 = new ACommaIdAssignValue(tcommaNode2, tidentifierNode3, null);
        }
	nodeList.add(pcommaidassignvalueNode1);
        return nodeList;
    }



    ArrayList new11()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommaIdAssignValue pcommaidassignvalueNode1;
        {
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        PAssignValue passignvalueNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        passignvalueNode4 = (PAssignValue)nodeArrayList3.get(0);

        pcommaidassignvalueNode1 = new ACommaIdAssignValue(tcommaNode2, tidentifierNode3, passignvalueNode4);
        }
	nodeList.add(pcommaidassignvalueNode1);
        return nodeList;
    }



    ArrayList new12()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignValue passignvalueNode1;
        {
        TAssign tassignNode2;
        PValue pvalueNode3;
        tassignNode2 = (TAssign)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        passignvalueNode1 = new AAssignValue(tassignNode2, pvalueNode3);
        }
	nodeList.add(passignvalueNode1);
        return nodeList;
    }



    ArrayList new13()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TIf tifNode3;
        PComparison pcomparisonNode4;
        TColon tcolonNode5;
        PStatement pstatementNode6;
        {
        }
        tifNode3 = (TIf)nodeArrayList1.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList2.get(0);
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        pstatementNode6 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AIfStatement(listNode2, tifNode3, pcomparisonNode4, tcolonNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new14()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TIf tifNode4;
        PComparison pcomparisonNode5;
        TColon tcolonNode6;
        PStatement pstatementNode7;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tifNode4 = (TIf)nodeArrayList2.get(0);
        pcomparisonNode5 = (PComparison)nodeArrayList3.get(0);
        tcolonNode6 = (TColon)nodeArrayList4.get(0);
        pstatementNode7 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(listNode3, tifNode4, pcomparisonNode5, tcolonNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new15()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TWhile twhileNode3;
        PComparison pcomparisonNode4;
        TColon tcolonNode5;
        PStatement pstatementNode6;
        {
        }
        twhileNode3 = (TWhile)nodeArrayList1.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList2.get(0);
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        pstatementNode6 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileStatement(listNode2, twhileNode3, pcomparisonNode4, tcolonNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new16()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TWhile twhileNode4;
        PComparison pcomparisonNode5;
        TColon tcolonNode6;
        PStatement pstatementNode7;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        twhileNode4 = (TWhile)nodeArrayList2.get(0);
        pcomparisonNode5 = (PComparison)nodeArrayList3.get(0);
        tcolonNode6 = (TColon)nodeArrayList4.get(0);
        pstatementNode7 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(listNode3, twhileNode4, pcomparisonNode5, tcolonNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new17()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TFor tforNode3;
        TIdentifier tidentifierNode4;
        TIn tinNode5;
        TIdentifier tidentifierNode6;
        TColon tcolonNode7;
        PStatement pstatementNode8;
        {
        }
        tforNode3 = (TFor)nodeArrayList1.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList2.get(0);
        tinNode5 = (TIn)nodeArrayList3.get(0);
        tidentifierNode6 = (TIdentifier)nodeArrayList4.get(0);
        tcolonNode7 = (TColon)nodeArrayList5.get(0);
        pstatementNode8 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AForStatement(listNode2, tforNode3, tidentifierNode4, tinNode5, tidentifierNode6, tcolonNode7, pstatementNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new18()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TFor tforNode4;
        TIdentifier tidentifierNode5;
        TIn tinNode6;
        TIdentifier tidentifierNode7;
        TColon tcolonNode8;
        PStatement pstatementNode9;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tforNode4 = (TFor)nodeArrayList2.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList3.get(0);
        tinNode6 = (TIn)nodeArrayList4.get(0);
        tidentifierNode7 = (TIdentifier)nodeArrayList5.get(0);
        tcolonNode8 = (TColon)nodeArrayList6.get(0);
        pstatementNode9 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AForStatement(listNode3, tforNode4, tidentifierNode5, tinNode6, tidentifierNode7, tcolonNode8, pstatementNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new19()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TReturn treturnNode3;
        PExpression pexpressionNode4;
        {
        }
        treturnNode3 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(listNode2, treturnNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new20()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TReturn treturnNode4;
        PExpression pexpressionNode5;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        treturnNode4 = (TReturn)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AReturnStatement(listNode3, treturnNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new21()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TPrint tprintNode3;
        PExpression pexpressionNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        {
        }
        tprintNode3 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(listNode2, tprintNode3, pexpressionNode4, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new22()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TPrint tprintNode4;
        PExpression pexpressionNode5;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tprintNode4 = (TPrint)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(listNode3, tprintNode4, pexpressionNode5, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new23()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TPrint tprintNode3;
        PExpression pexpressionNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        }
        tprintNode3 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new APrintStatement(listNode2, tprintNode3, pexpressionNode4, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new24()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TPrint tprintNode4;
        PExpression pexpressionNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tprintNode4 = (TPrint)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstatementNode1 = new APrintStatement(listNode3, tprintNode4, pexpressionNode5, listNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new25()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PAssignmentStatement passignmentstatementNode3;
        {
        }
        passignmentstatementNode3 = (PAssignmentStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AAssignmentStatement(listNode2, passignmentstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new26()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PAssignmentStatement passignmentstatementNode4;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        passignmentstatementNode4 = (PAssignmentStatement)nodeArrayList2.get(0);

        pstatementNode1 = new AAssignmentStatement(listNode3, passignmentstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new27()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TAssert tassertNode3;
        PExpression pexpressionNode4;
        Object nullNode5 = null;
        {
        }
        tassertNode3 = (TAssert)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AAssertStatement(listNode2, tassertNode3, pexpressionNode4, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new28()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TAssert tassertNode4;
        PExpression pexpressionNode5;
        Object nullNode6 = null;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tassertNode4 = (TAssert)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssertStatement(listNode3, tassertNode4, pexpressionNode5, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new29()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TAssert tassertNode3;
        PExpression pexpressionNode4;
        PCommaExpression pcommaexpressionNode5;
        {
        }
        tassertNode3 = (TAssert)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        pcommaexpressionNode5 = (PCommaExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssertStatement(listNode2, tassertNode3, pexpressionNode4, pcommaexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new30()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TAssert tassertNode4;
        PExpression pexpressionNode5;
        PCommaExpression pcommaexpressionNode6;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tassertNode4 = (TAssert)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        pcommaexpressionNode6 = (PCommaExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAssertStatement(listNode3, tassertNode4, pexpressionNode5, pcommaexpressionNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new31()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFuncCallStatement(pfunctioncallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new32()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignmentStatement passignmentstatementNode1;
        {
        TIdentifier tidentifierNode2;
        TAssign tassignNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        passignmentstatementNode1 = new AAssignAssignmentStatement(tidentifierNode2, tassignNode3, pexpressionNode4);
        }
	nodeList.add(passignmentstatementNode1);
        return nodeList;
    }



    ArrayList new33()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignmentStatement passignmentstatementNode1;
        {
        TIdentifier tidentifierNode2;
        TMinusAssign tminusassignNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tminusassignNode3 = (TMinusAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        passignmentstatementNode1 = new AMinusAssignAssignmentStatement(tidentifierNode2, tminusassignNode3, pexpressionNode4);
        }
	nodeList.add(passignmentstatementNode1);
        return nodeList;
    }



    ArrayList new34()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignmentStatement passignmentstatementNode1;
        {
        TIdentifier tidentifierNode2;
        TDivAssign tdivassignNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tdivassignNode3 = (TDivAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        passignmentstatementNode1 = new ADivAssignAssignmentStatement(tidentifierNode2, tdivassignNode3, pexpressionNode4);
        }
	nodeList.add(passignmentstatementNode1);
        return nodeList;
    }



    ArrayList new35()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignmentStatement passignmentstatementNode1;
        {
        TIdentifier tidentifierNode2;
        TLBr tlbrNode3;
        PExpression pexpressionNode4;
        TRBr trbrNode5;
        TAssign tassignNode6;
        PExpression pexpressionNode7;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlbrNode3 = (TLBr)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trbrNode5 = (TRBr)nodeArrayList4.get(0);
        tassignNode6 = (TAssign)nodeArrayList5.get(0);
        pexpressionNode7 = (PExpression)nodeArrayList6.get(0);

        passignmentstatementNode1 = new AAssignListAssignmentStatement(tidentifierNode2, tlbrNode3, pexpressionNode4, trbrNode5, tassignNode6, pexpressionNode7);
        }
	nodeList.add(passignmentstatementNode1);
        return nodeList;
    }



    ArrayList new36()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PSum psumNode2;
        psumNode2 = (PSum)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpression(psumNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new37()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSum psumNode1;
        {
        PSum psumNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        psumNode2 = (PSum)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        psumNode1 = new ASumSum(psumNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(psumNode1);
        return nodeList;
    }



    ArrayList new38()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSum psumNode1;
        {
        PSum psumNode2;
        TMinus tminusNode3;
        PTerm ptermNode4;
        psumNode2 = (PSum)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        psumNode1 = new AMinusSum(psumNode2, tminusNode3, ptermNode4);
        }
	nodeList.add(psumNode1);
        return nodeList;
    }



    ArrayList new39()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSum psumNode1;
        {
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        psumNode1 = new ATermSum(ptermNode2);
        }
	nodeList.add(psumNode1);
        return nodeList;
    }



    ArrayList new40()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PTerm ptermNode1;
        {
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        ptermNode1 = new ATerm(pvalueNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    ArrayList new41()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pcomparisonNode1 = new AComparison(ttrueNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new42()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TIdentifier tidentifierNode2;
        TDot tdotNode3;
        PFunctionCall pfunctioncallNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pfunctioncallNode4 = (PFunctionCall)nodeArrayList3.get(0);

        pvalueNode1 = new AFunCallValue(tidentifierNode2, tdotNode3, pfunctioncallNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new43()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        PNumber pnumberNode2;
        pnumberNode2 = (PNumber)nodeArrayList1.get(0);

        pvalueNode1 = new ANumValue(pnumberNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new44()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pvalueNode1 = new AStringValue(tstringliteralNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new45()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PNumber pnumberNode1;
        {
        TIntegerLiteral tintegerliteralNode2;
        tintegerliteralNode2 = (TIntegerLiteral)nodeArrayList1.get(0);

        pnumberNode1 = new ANumber(tintegerliteralNode2);
        }
	nodeList.add(pnumberNode1);
        return nodeList;
    }



    ArrayList new46()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        Object nullNode4 = null;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pfunctioncallNode1 = new AFunctionCall(tidentifierNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new47()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        PArglist parglistNode4;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        parglistNode4 = (PArglist)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunctioncallNode1 = new AFunctionCall(tidentifierNode2, tlparNode3, parglistNode4, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new48()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        }

        parglistNode1 = new AArglist(pexpressionNode2, listNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new49()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parglistNode1 = new AArglist(pexpressionNode2, listNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new50()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommaExpression pcommaexpressionNode1;
        {
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pcommaexpressionNode1 = new ACommaExpression(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pcommaexpressionNode1);
        return nodeList;
    }



    ArrayList new51()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommand pcommandNode1;
        pcommandNode1 = (PCommand)nodeArrayList1.get(0);
	if(pcommandNode1 != null)
	{
	  listNode2.add(pcommandNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new52()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommand pcommandNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommandNode2 = (PCommand)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommandNode2 != null)
	{
	  listNode3.add(pcommandNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new53()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommaIdAssignValue pcommaidassignvalueNode1;
        pcommaidassignvalueNode1 = (PCommaIdAssignValue)nodeArrayList1.get(0);
	if(pcommaidassignvalueNode1 != null)
	{
	  listNode2.add(pcommaidassignvalueNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new54()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommaIdAssignValue pcommaidassignvalueNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommaidassignvalueNode2 = (PCommaIdAssignValue)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaidassignvalueNode2 != null)
	{
	  listNode3.add(pcommaidassignvalueNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new55()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        TTab ttabNode1;
        ttabNode1 = (TTab)nodeArrayList1.get(0);
	if(ttabNode1 != null)
	{
	  listNode2.add(ttabNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new56()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        TTab ttabNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        ttabNode2 = (TTab)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ttabNode2 != null)
	{
	  listNode3.add(ttabNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new57()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommaExpression pcommaexpressionNode1;
        pcommaexpressionNode1 = (PCommaExpression)nodeArrayList1.get(0);
	if(pcommaexpressionNode1 != null)
	{
	  listNode2.add(pcommaexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new58()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommaExpression pcommaexpressionNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommaexpressionNode2 = (PCommaExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaexpressionNode2 != null)
	{
	  listNode3.add(pcommaexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {33, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 2}, {41, SHIFT, 18}, },
			{{-1, ERROR, 3}, {41, SHIFT, 18}, },
			{{-1, ERROR, 4}, {48, SHIFT, 21}, },
			{{-1, ERROR, 5}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 6}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 7}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 8}, {48, SHIFT, 32}, },
			{{-1, ERROR, 9}, {1, SHIFT, 33}, {2, SHIFT, 34}, {3, SHIFT, 35}, {5, SHIFT, 36}, {7, SHIFT, 37}, },
			{{-1, ERROR, 10}, {50, ACCEPT, -1}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {33, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 17}, {0, SHIFT, 39}, {19, SHIFT, 40}, {23, SHIFT, 41}, {24, SHIFT, 42}, {25, SHIFT, 43}, {26, SHIFT, 44}, {31, SHIFT, 45}, {48, SHIFT, 46}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 19}, {45, SHIFT, 48}, },
			{{-1, ERROR, 20}, {45, SHIFT, 49}, },
			{{-1, ERROR, 21}, {20, SHIFT, 50}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 23}, {12, SHIFT, 51}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 21}, {9, SHIFT, 52}, },
			{{-1, REDUCE, 36}, {13, SHIFT, 55}, {14, SHIFT, 56}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 27}, {9, SHIFT, 52}, },
			{{-1, ERROR, 32}, {5, SHIFT, 58}, },
			{{-1, ERROR, 33}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 34}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 35}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 36}, {6, SHIFT, 62}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 37}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 40}, {41, SHIFT, 18}, },
			{{-1, ERROR, 41}, {41, SHIFT, 18}, },
			{{-1, ERROR, 42}, {48, SHIFT, 68}, },
			{{-1, ERROR, 43}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 44}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 45}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 46}, {1, SHIFT, 33}, {2, SHIFT, 34}, {3, SHIFT, 35}, {7, SHIFT, 37}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 48}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {48, SHIFT, 9}, },
			{{-1, ERROR, 49}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {48, SHIFT, 9}, },
			{{-1, ERROR, 50}, {48, SHIFT, 74}, },
			{{-1, ERROR, 51}, {48, SHIFT, 75}, },
			{{-1, ERROR, 52}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 23}, {9, SHIFT, 52}, },
			{{-1, ERROR, 55}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 56}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 58}, {6, SHIFT, 81}, {48, SHIFT, 82}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 48}, {9, SHIFT, 52}, },
			{{-1, ERROR, 64}, {6, SHIFT, 85}, },
			{{-1, ERROR, 65}, {8, SHIFT, 86}, },
			{{-1, ERROR, 66}, {45, SHIFT, 87}, },
			{{-1, ERROR, 67}, {45, SHIFT, 88}, },
			{{-1, ERROR, 68}, {20, SHIFT, 89}, },
			{{-1, REDUCE, 22}, {9, SHIFT, 52}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 28}, {9, SHIFT, 52}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 74}, {45, SHIFT, 92}, },
			{{-1, ERROR, 75}, {5, SHIFT, 36}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 81}, {45, SHIFT, 93}, },
			{{-1, REDUCE, 6}, {1, SHIFT, 94}, {9, SHIFT, 95}, },
			{{-1, ERROR, 83}, {6, SHIFT, 99}, },
			{{-1, REDUCE, 49}, {9, SHIFT, 52}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 86}, {1, SHIFT, 100}, },
			{{-1, ERROR, 87}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {48, SHIFT, 9}, },
			{{-1, ERROR, 88}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {48, SHIFT, 9}, },
			{{-1, ERROR, 89}, {48, SHIFT, 103}, },
			{{-1, REDUCE, 24}, {9, SHIFT, 52}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 92}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {48, SHIFT, 9}, },
			{{-1, ERROR, 93}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {48, SHIFT, 9}, },
			{{-1, ERROR, 94}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 95}, {48, SHIFT, 107}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 7}, {9, SHIFT, 95}, },
			{{-1, REDUCE, 8}, {9, SHIFT, 95}, },
			{{-1, ERROR, 99}, {45, SHIFT, 110}, },
			{{-1, ERROR, 100}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 103}, {45, SHIFT, 112}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 10}, {1, SHIFT, 94}, },
			{{-1, REDUCE, 9}, {9, SHIFT, 95}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 110}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {48, SHIFT, 9}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 112}, {0, SHIFT, 1}, {19, SHIFT, 2}, {23, SHIFT, 3}, {24, SHIFT, 4}, {25, SHIFT, 5}, {26, SHIFT, 6}, {31, SHIFT, 7}, {48, SHIFT, 9}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 18}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 10}, },
			{{-1, 11}, {16, 38}, },
			{{-1, 12}, },
			{{-1, 83}, },
			{{-1, 96}, {98, 109}, {108, 109}, },
			{{-1, 97}, {107, 113}, },
			{{-1, 13}, {48, 72}, {49, 73}, {87, 101}, {88, 102}, {92, 104}, {93, 105}, {110, 114}, {112, 115}, },
			{{-1, 14}, {17, 47}, },
			{{-1, 25}, {6, 30}, {7, 31}, {33, 59}, {34, 60}, {35, 61}, {36, 63}, {37, 65}, {43, 69}, {44, 70}, {45, 71}, {52, 77}, {100, 111}, },
			{{-1, 26}, },
			{{-1, 27}, {55, 79}, {56, 80}, },
			{{-1, 19}, {3, 20}, {40, 66}, {41, 67}, },
			{{-1, 28}, {94, 106}, },
			{{-1, 29}, },
			{{-1, 15}, {51, 76}, },
			{{-1, 64}, },
			{{-1, 53}, {31, 57}, {54, 78}, {71, 91}, {84, 78}, {90, 78}, },
			{{-1, 16}, },
			{{-1, 98}, {97, 108}, },
			{{-1, 17}, },
			{{-1, 54}, {63, 84}, {69, 90}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: tab, 'if', 'while', 'for', 'print', 'return', 'assert', 'def', identifier, EOF",
			"expecting: tab, 'if', 'while', 'for', 'print', 'return', 'assert', identifier",
			"expecting: 'true'",
			"expecting: identifier",
			"expecting: integer literal, identifier, string literal",
			"expecting: '=', '-=', '/=', '(', '['",
			"expecting: EOF",
			"expecting: ':'",
			"expecting: 'in'",
			"expecting: tab, ')', ']', ',', '+', '-', 'if', 'while', 'for', 'print', 'return', 'assert', 'def', identifier, EOF",
			"expecting: '.'",
			"expecting: tab, ',', 'if', 'while', 'for', 'print', 'return', 'assert', 'def', identifier, EOF",
			"expecting: '('",
			"expecting: ')', integer literal, identifier, string literal",
			"expecting: '=', '-=', '/=', '['",
			"expecting: tab, ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', 'def', identifier, EOF",
			"expecting: ')', identifier",
			"expecting: ')', ','",
			"expecting: ')'",
			"expecting: ']'",
			"expecting: '=', ')', ','",
			"expecting: '='",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 4, 4, 3, 5, 6, 0, 0, 0, 0, 0, 0, 1, 7, 7, 7, 8, 9, 10, 9, 11, 9, 9, 9, 9, 0, 11, 12, 4, 4, 4, 13, 4, 0, 1, 2, 2, 3, 4, 4, 4, 14, 0, 1, 1, 3, 3, 4, 15, 11, 4, 4, 0, 16, 0, 0, 0, 9, 17, 18, 19, 7, 7, 8, 11, 0, 11, 0, 0, 7, 12, 9, 15, 15, 9, 9, 7, 20, 18, 17, 9, 21, 1, 1, 3, 11, 0, 1, 1, 4, 3, 17, 17, 17, 7, 4, 0, 0, 7, 0, 0, 17, 20, 17, 17, 1, 0, 1, 17, 0, 0, 
        };*/
}
