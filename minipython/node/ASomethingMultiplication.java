/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ASomethingMultiplication extends PMultiplication
{
    private PSomething _something_;

    public ASomethingMultiplication()
    {
    }

    public ASomethingMultiplication(
        PSomething _something_)
    {
        setSomething(_something_);

    }
    public Object clone()
    {
        return new ASomethingMultiplication(
            (PSomething) cloneNode(_something_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASomethingMultiplication(this);
    }

    public PSomething getSomething()
    {
        return _something_;
    }

    public void setSomething(PSomething node)
    {
        if(_something_ != null)
        {
            _something_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _something_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_something_);
    }

    void removeChild(Node child)
    {
        if(_something_ == child)
        {
            _something_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_something_ == oldChild)
        {
            setSomething((PSomething) newChild);
            return;
        }

    }
}
