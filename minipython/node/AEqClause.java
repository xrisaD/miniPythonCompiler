/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AEqClause extends PClause
{
    private PExpression _lhs_;
    private TEq _eq_;
    private PExpression _rhs_;

    public AEqClause()
    {
    }

    public AEqClause(
        PExpression _lhs_,
        TEq _eq_,
        PExpression _rhs_)
    {
        setLhs(_lhs_);

        setEq(_eq_);

        setRhs(_rhs_);

    }
    public Object clone()
    {
        return new AEqClause(
            (PExpression) cloneNode(_lhs_),
            (TEq) cloneNode(_eq_),
            (PExpression) cloneNode(_rhs_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEqClause(this);
    }

    public PExpression getLhs()
    {
        return _lhs_;
    }

    public void setLhs(PExpression node)
    {
        if(_lhs_ != null)
        {
            _lhs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lhs_ = node;
    }

    public TEq getEq()
    {
        return _eq_;
    }

    public void setEq(TEq node)
    {
        if(_eq_ != null)
        {
            _eq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _eq_ = node;
    }

    public PExpression getRhs()
    {
        return _rhs_;
    }

    public void setRhs(PExpression node)
    {
        if(_rhs_ != null)
        {
            _rhs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rhs_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lhs_)
            + toString(_eq_)
            + toString(_rhs_);
    }

    void removeChild(Node child)
    {
        if(_lhs_ == child)
        {
            _lhs_ = null;
            return;
        }

        if(_eq_ == child)
        {
            _eq_ = null;
            return;
        }

        if(_rhs_ == child)
        {
            _rhs_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lhs_ == oldChild)
        {
            setLhs((PExpression) newChild);
            return;
        }

        if(_eq_ == oldChild)
        {
            setEq((TEq) newChild);
            return;
        }

        if(_rhs_ == oldChild)
        {
            setRhs((PExpression) newChild);
            return;
        }

    }
}
