/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AModuloTerm extends PTerm
{
    private PTerm _term_;
    private TMode _mode_;
    private PPower _power_;

    public AModuloTerm()
    {
    }

    public AModuloTerm(
        PTerm _term_,
        TMode _mode_,
        PPower _power_)
    {
        setTerm(_term_);

        setMode(_mode_);

        setPower(_power_);

    }
    public Object clone()
    {
        return new AModuloTerm(
            (PTerm) cloneNode(_term_),
            (TMode) cloneNode(_mode_),
            (PPower) cloneNode(_power_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModuloTerm(this);
    }

    public PTerm getTerm()
    {
        return _term_;
    }

    public void setTerm(PTerm node)
    {
        if(_term_ != null)
        {
            _term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _term_ = node;
    }

    public TMode getMode()
    {
        return _mode_;
    }

    public void setMode(TMode node)
    {
        if(_mode_ != null)
        {
            _mode_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _mode_ = node;
    }

    public PPower getPower()
    {
        return _power_;
    }

    public void setPower(PPower node)
    {
        if(_power_ != null)
        {
            _power_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _power_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_term_)
            + toString(_mode_)
            + toString(_power_);
    }

    void removeChild(Node child)
    {
        if(_term_ == child)
        {
            _term_ = null;
            return;
        }

        if(_mode_ == child)
        {
            _mode_ = null;
            return;
        }

        if(_power_ == child)
        {
            _power_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        if(_mode_ == oldChild)
        {
            setMode((TMode) newChild);
            return;
        }

        if(_power_ == oldChild)
        {
            setPower((PPower) newChild);
            return;
        }

    }
}
