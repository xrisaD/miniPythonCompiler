/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AArgument extends PArgument
{
    private PIdentifierValue _id1_;
    private final LinkedList _id2_ = new TypedLinkedList(new Id2_Cast());

    public AArgument()
    {
    }

    public AArgument(
        PIdentifierValue _id1_,
        List _id2_)
    {
        setId1(_id1_);

        {
            this._id2_.clear();
            this._id2_.addAll(_id2_);
        }

    }
    public Object clone()
    {
        return new AArgument(
            (PIdentifierValue) cloneNode(_id1_),
            cloneList(_id2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgument(this);
    }

    public PIdentifierValue getId1()
    {
        return _id1_;
    }

    public void setId1(PIdentifierValue node)
    {
        if(_id1_ != null)
        {
            _id1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id1_ = node;
    }

    public LinkedList getId2()
    {
        return _id2_;
    }

    public void setId2(List list)
    {
        _id2_.clear();
        _id2_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_id1_)
            + toString(_id2_);
    }

    void removeChild(Node child)
    {
        if(_id1_ == child)
        {
            _id1_ = null;
            return;
        }

        if(_id2_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_id1_ == oldChild)
        {
            setId1((PIdentifierValue) newChild);
            return;
        }

        for(ListIterator i = _id2_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Id2_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PIdentifierValue node = (PIdentifierValue) o;

            if((node.parent() != null) &&
                (node.parent() != AArgument.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AArgument.this))
            {
                node.parent(AArgument.this);
            }

            return node;
        }
    }
}
