/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AAndcCompT extends PCompT
{
    private TAnd _and_;
    private PComparison _comparison_;
    private PCompT _compT_;

    public AAndcCompT()
    {
    }

    public AAndcCompT(
        TAnd _and_,
        PComparison _comparison_,
        PCompT _compT_)
    {
        setAnd(_and_);

        setComparison(_comparison_);

        setCompT(_compT_);

    }
    public Object clone()
    {
        return new AAndcCompT(
            (TAnd) cloneNode(_and_),
            (PComparison) cloneNode(_comparison_),
            (PCompT) cloneNode(_compT_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndcCompT(this);
    }

    public TAnd getAnd()
    {
        return _and_;
    }

    public void setAnd(TAnd node)
    {
        if(_and_ != null)
        {
            _and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _and_ = node;
    }

    public PComparison getComparison()
    {
        return _comparison_;
    }

    public void setComparison(PComparison node)
    {
        if(_comparison_ != null)
        {
            _comparison_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comparison_ = node;
    }

    public PCompT getCompT()
    {
        return _compT_;
    }

    public void setCompT(PCompT node)
    {
        if(_compT_ != null)
        {
            _compT_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _compT_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_and_)
            + toString(_comparison_)
            + toString(_compT_);
    }

    void removeChild(Node child)
    {
        if(_and_ == child)
        {
            _and_ = null;
            return;
        }

        if(_comparison_ == child)
        {
            _comparison_ = null;
            return;
        }

        if(_compT_ == child)
        {
            _compT_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_and_ == oldChild)
        {
            setAnd((TAnd) newChild);
            return;
        }

        if(_comparison_ == oldChild)
        {
            setComparison((PComparison) newChild);
            return;
        }

        if(_compT_ == oldChild)
        {
            setCompT((PCompT) newChild);
            return;
        }

    }
}
