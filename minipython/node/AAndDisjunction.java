/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AAndDisjunction extends PDisjunction
{
    private PConjuction _conjuction_;

    public AAndDisjunction()
    {
    }

    public AAndDisjunction(
        PConjuction _conjuction_)
    {
        setConjuction(_conjuction_);

    }
    public Object clone()
    {
        return new AAndDisjunction(
            (PConjuction) cloneNode(_conjuction_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndDisjunction(this);
    }

    public PConjuction getConjuction()
    {
        return _conjuction_;
    }

    public void setConjuction(PConjuction node)
    {
        if(_conjuction_ != null)
        {
            _conjuction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _conjuction_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_conjuction_);
    }

    void removeChild(Node child)
    {
        if(_conjuction_ == child)
        {
            _conjuction_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_conjuction_ == oldChild)
        {
            setConjuction((PConjuction) newChild);
            return;
        }

    }
}
