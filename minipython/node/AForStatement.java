/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AForStatement extends PStatement
{
    private TIdentifier _id1_;
    private TIdentifier _id2_;
    private PStatement _statement_;

    public AForStatement()
    {
    }

    public AForStatement(
        TIdentifier _id1_,
        TIdentifier _id2_,
        PStatement _statement_)
    {
        setId1(_id1_);

        setId2(_id2_);

        setStatement(_statement_);

    }
    public Object clone()
    {
        return new AForStatement(
            (TIdentifier) cloneNode(_id1_),
            (TIdentifier) cloneNode(_id2_),
            (PStatement) cloneNode(_statement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStatement(this);
    }

    public TIdentifier getId1()
    {
        return _id1_;
    }

    public void setId1(TIdentifier node)
    {
        if(_id1_ != null)
        {
            _id1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id1_ = node;
    }

    public TIdentifier getId2()
    {
        return _id2_;
    }

    public void setId2(TIdentifier node)
    {
        if(_id2_ != null)
        {
            _id2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id2_ = node;
    }

    public PStatement getStatement()
    {
        return _statement_;
    }

    public void setStatement(PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _statement_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_id1_)
            + toString(_id2_)
            + toString(_statement_);
    }

    void removeChild(Node child)
    {
        if(_id1_ == child)
        {
            _id1_ = null;
            return;
        }

        if(_id2_ == child)
        {
            _id2_ = null;
            return;
        }

        if(_statement_ == child)
        {
            _statement_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_id1_ == oldChild)
        {
            setId1((TIdentifier) newChild);
            return;
        }

        if(_id2_ == oldChild)
        {
            setId2((TIdentifier) newChild);
            return;
        }

        if(_statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

    }
}
