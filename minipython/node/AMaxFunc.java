/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AMaxFunc extends PFunc
{
    private TMax _max_;
    private TLPar _lPar_;
    private PValue _value_;
    private final LinkedList _commaValue_ = new TypedLinkedList(new CommaValue_Cast());
    private TRPar _rPar_;

    public AMaxFunc()
    {
    }

    public AMaxFunc(
        TMax _max_,
        TLPar _lPar_,
        PValue _value_,
        List _commaValue_,
        TRPar _rPar_)
    {
        setMax(_max_);

        setLPar(_lPar_);

        setValue(_value_);

        {
            this._commaValue_.clear();
            this._commaValue_.addAll(_commaValue_);
        }

        setRPar(_rPar_);

    }
    public Object clone()
    {
        return new AMaxFunc(
            (TMax) cloneNode(_max_),
            (TLPar) cloneNode(_lPar_),
            (PValue) cloneNode(_value_),
            cloneList(_commaValue_),
            (TRPar) cloneNode(_rPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMaxFunc(this);
    }

    public TMax getMax()
    {
        return _max_;
    }

    public void setMax(TMax node)
    {
        if(_max_ != null)
        {
            _max_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _max_ = node;
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public PValue getValue()
    {
        return _value_;
    }

    public void setValue(PValue node)
    {
        if(_value_ != null)
        {
            _value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _value_ = node;
    }

    public LinkedList getCommaValue()
    {
        return _commaValue_;
    }

    public void setCommaValue(List list)
    {
        _commaValue_.clear();
        _commaValue_.addAll(list);
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_max_)
            + toString(_lPar_)
            + toString(_value_)
            + toString(_commaValue_)
            + toString(_rPar_);
    }

    void removeChild(Node child)
    {
        if(_max_ == child)
        {
            _max_ = null;
            return;
        }

        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_value_ == child)
        {
            _value_ = null;
            return;
        }

        if(_commaValue_.remove(child))
        {
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_max_ == oldChild)
        {
            setMax((TMax) newChild);
            return;
        }

        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        for(ListIterator i = _commaValue_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

    }

    private class CommaValue_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PCommaValue node = (PCommaValue) o;

            if((node.parent() != null) &&
                (node.parent() != AMaxFunc.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AMaxFunc.this))
            {
                node.parent(AMaxFunc.this);
            }

            return node;
        }
    }
}
