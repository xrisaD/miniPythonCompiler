/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ALiteralClause extends PClause
{
    private PBooleanLiteral _booleanLiteral_;

    public ALiteralClause()
    {
    }

    public ALiteralClause(
        PBooleanLiteral _booleanLiteral_)
    {
        setBooleanLiteral(_booleanLiteral_);

    }
    public Object clone()
    {
        return new ALiteralClause(
            (PBooleanLiteral) cloneNode(_booleanLiteral_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALiteralClause(this);
    }

    public PBooleanLiteral getBooleanLiteral()
    {
        return _booleanLiteral_;
    }

    public void setBooleanLiteral(PBooleanLiteral node)
    {
        if(_booleanLiteral_ != null)
        {
            _booleanLiteral_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _booleanLiteral_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_booleanLiteral_);
    }

    void removeChild(Node child)
    {
        if(_booleanLiteral_ == child)
        {
            _booleanLiteral_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_booleanLiteral_ == oldChild)
        {
            setBooleanLiteral((PBooleanLiteral) newChild);
            return;
        }

    }
}
