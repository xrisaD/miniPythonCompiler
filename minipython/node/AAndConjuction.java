/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AAndConjuction extends PConjuction
{
    private PConjuction _conjuction_;
    private TAnd _and_;
    private PNegated _negated_;

    public AAndConjuction()
    {
    }

    public AAndConjuction(
        PConjuction _conjuction_,
        TAnd _and_,
        PNegated _negated_)
    {
        setConjuction(_conjuction_);

        setAnd(_and_);

        setNegated(_negated_);

    }
    public Object clone()
    {
        return new AAndConjuction(
            (PConjuction) cloneNode(_conjuction_),
            (TAnd) cloneNode(_and_),
            (PNegated) cloneNode(_negated_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndConjuction(this);
    }

    public PConjuction getConjuction()
    {
        return _conjuction_;
    }

    public void setConjuction(PConjuction node)
    {
        if(_conjuction_ != null)
        {
            _conjuction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _conjuction_ = node;
    }

    public TAnd getAnd()
    {
        return _and_;
    }

    public void setAnd(TAnd node)
    {
        if(_and_ != null)
        {
            _and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _and_ = node;
    }

    public PNegated getNegated()
    {
        return _negated_;
    }

    public void setNegated(PNegated node)
    {
        if(_negated_ != null)
        {
            _negated_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _negated_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_conjuction_)
            + toString(_and_)
            + toString(_negated_);
    }

    void removeChild(Node child)
    {
        if(_conjuction_ == child)
        {
            _conjuction_ = null;
            return;
        }

        if(_and_ == child)
        {
            _and_ = null;
            return;
        }

        if(_negated_ == child)
        {
            _negated_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_conjuction_ == oldChild)
        {
            setConjuction((PConjuction) newChild);
            return;
        }

        if(_and_ == oldChild)
        {
            setAnd((TAnd) newChild);
            return;
        }

        if(_negated_ == oldChild)
        {
            setNegated((PNegated) newChild);
            return;
        }

    }
}
