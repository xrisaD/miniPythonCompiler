/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AAssignListAssignmentStatement extends PAssignmentStatement
{
    private TIdentifier _identifier_;
    private TLBr _lBr_;
    private PExpression _ex1_;
    private TRBr _rBr_;
    private TAssign _assign_;
    private PExpression _ex2_;

    public AAssignListAssignmentStatement()
    {
    }

    public AAssignListAssignmentStatement(
        TIdentifier _identifier_,
        TLBr _lBr_,
        PExpression _ex1_,
        TRBr _rBr_,
        TAssign _assign_,
        PExpression _ex2_)
    {
        setIdentifier(_identifier_);

        setLBr(_lBr_);

        setEx1(_ex1_);

        setRBr(_rBr_);

        setAssign(_assign_);

        setEx2(_ex2_);

    }
    public Object clone()
    {
        return new AAssignListAssignmentStatement(
            (TIdentifier) cloneNode(_identifier_),
            (TLBr) cloneNode(_lBr_),
            (PExpression) cloneNode(_ex1_),
            (TRBr) cloneNode(_rBr_),
            (TAssign) cloneNode(_assign_),
            (PExpression) cloneNode(_ex2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignListAssignmentStatement(this);
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TLBr getLBr()
    {
        return _lBr_;
    }

    public void setLBr(TLBr node)
    {
        if(_lBr_ != null)
        {
            _lBr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lBr_ = node;
    }

    public PExpression getEx1()
    {
        return _ex1_;
    }

    public void setEx1(PExpression node)
    {
        if(_ex1_ != null)
        {
            _ex1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _ex1_ = node;
    }

    public TRBr getRBr()
    {
        return _rBr_;
    }

    public void setRBr(TRBr node)
    {
        if(_rBr_ != null)
        {
            _rBr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rBr_ = node;
    }

    public TAssign getAssign()
    {
        return _assign_;
    }

    public void setAssign(TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _assign_ = node;
    }

    public PExpression getEx2()
    {
        return _ex2_;
    }

    public void setEx2(PExpression node)
    {
        if(_ex2_ != null)
        {
            _ex2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _ex2_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_identifier_)
            + toString(_lBr_)
            + toString(_ex1_)
            + toString(_rBr_)
            + toString(_assign_)
            + toString(_ex2_);
    }

    void removeChild(Node child)
    {
        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_lBr_ == child)
        {
            _lBr_ = null;
            return;
        }

        if(_ex1_ == child)
        {
            _ex1_ = null;
            return;
        }

        if(_rBr_ == child)
        {
            _rBr_ = null;
            return;
        }

        if(_assign_ == child)
        {
            _assign_ = null;
            return;
        }

        if(_ex2_ == child)
        {
            _ex2_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_lBr_ == oldChild)
        {
            setLBr((TLBr) newChild);
            return;
        }

        if(_ex1_ == oldChild)
        {
            setEx1((PExpression) newChild);
            return;
        }

        if(_rBr_ == oldChild)
        {
            setRBr((TRBr) newChild);
            return;
        }

        if(_assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(_ex2_ == oldChild)
        {
            setEx2((PExpression) newChild);
            return;
        }

    }
}
