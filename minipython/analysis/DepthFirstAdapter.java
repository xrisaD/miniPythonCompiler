/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPGoal().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getCommand().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommand) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAFuncCommand(AFuncCommand node)
    {
        defaultIn(node);
    }

    public void outAFuncCommand(AFuncCommand node)
    {
        defaultOut(node);
    }

    public void caseAFuncCommand(AFuncCommand node)
    {
        inAFuncCommand(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFuncCommand(node);
    }

    public void inAStatementCommand(AStatementCommand node)
    {
        defaultIn(node);
    }

    public void outAStatementCommand(AStatementCommand node)
    {
        defaultOut(node);
    }

    public void caseAStatementCommand(AStatementCommand node)
    {
        inAStatementCommand(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementCommand(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getIdentifierValue().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PIdentifierValue) temp[i]).apply(this);
            }
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAFunction(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        {
            Object temp[] = node.getId2().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PIdentifierValue) temp[i]).apply(this);
            }
        }
        outAArgument(node);
    }

    public void inAIdentifierValue(AIdentifierValue node)
    {
        defaultIn(node);
    }

    public void outAIdentifierValue(AIdentifierValue node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierValue(AIdentifierValue node)
    {
        inAIdentifierValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAIdentifierValue(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAForStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        {
            Object temp[] = node.getExp2().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAPrintStatement(node);
    }

    public void inAAssertStatement(AAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertStatement(AAssertStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        inAAssertStatement(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAAssertStatement(node);
    }

    public void inAFuncCallStatement(AFuncCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFuncCallStatement(AFuncCallStatement node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallStatement(AFuncCallStatement node)
    {
        inAFuncCallStatement(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFuncCallStatement(node);
    }

    public void inAAssignStatement(AAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatement(AAssignStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssignStatement(AAssignStatement node)
    {
        inAAssignStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssignStatement(node);
    }

    public void inAMinusAssignStatement(AMinusAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAMinusAssignStatement(AMinusAssignStatement node)
    {
        defaultOut(node);
    }

    public void caseAMinusAssignStatement(AMinusAssignStatement node)
    {
        inAMinusAssignStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMinusAssignStatement(node);
    }

    public void inADivAssignStatement(ADivAssignStatement node)
    {
        defaultIn(node);
    }

    public void outADivAssignStatement(ADivAssignStatement node)
    {
        defaultOut(node);
    }

    public void caseADivAssignStatement(ADivAssignStatement node)
    {
        inADivAssignStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outADivAssignStatement(node);
    }

    public void inAAssignListStatement(AAssignListStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignListStatement(AAssignListStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssignListStatement(AAssignListStatement node)
    {
        inAAssignListStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getEx1() != null)
        {
            node.getEx1().apply(this);
        }
        if(node.getEx2() != null)
        {
            node.getEx2().apply(this);
        }
        outAAssignListStatement(node);
    }

    public void inASumExpression(ASumExpression node)
    {
        defaultIn(node);
    }

    public void outASumExpression(ASumExpression node)
    {
        defaultOut(node);
    }

    public void caseASumExpression(ASumExpression node)
    {
        inASumExpression(node);
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        outASumExpression(node);
    }

    public void inAMinusExpression(AMinusExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression(AMinusExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinusExpression(AMinusExpression node)
    {
        inAMinusExpression(node);
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        outAMinusExpression(node);
    }

    public void inAMultExpression(AMultExpression node)
    {
        defaultIn(node);
    }

    public void outAMultExpression(AMultExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultExpression(AMultExpression node)
    {
        inAMultExpression(node);
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        outAMultExpression(node);
    }

    public void inADivExpression(ADivExpression node)
    {
        defaultIn(node);
    }

    public void outADivExpression(ADivExpression node)
    {
        defaultOut(node);
    }

    public void caseADivExpression(ADivExpression node)
    {
        inADivExpression(node);
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        outADivExpression(node);
    }

    public void inAModuloExpression(AModuloExpression node)
    {
        defaultIn(node);
    }

    public void outAModuloExpression(AModuloExpression node)
    {
        defaultOut(node);
    }

    public void caseAModuloExpression(AModuloExpression node)
    {
        inAModuloExpression(node);
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        outAModuloExpression(node);
    }

    public void inAPowExpression(APowExpression node)
    {
        defaultIn(node);
    }

    public void outAPowExpression(APowExpression node)
    {
        defaultOut(node);
    }

    public void caseAPowExpression(APowExpression node)
    {
        inAPowExpression(node);
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        outAPowExpression(node);
    }

    public void inASubscriptionExpression(ASubscriptionExpression node)
    {
        defaultIn(node);
    }

    public void outASubscriptionExpression(ASubscriptionExpression node)
    {
        defaultOut(node);
    }

    public void caseASubscriptionExpression(ASubscriptionExpression node)
    {
        inASubscriptionExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASubscriptionExpression(node);
    }

    public void inAFuncCallExpression(AFuncCallExpression node)
    {
        defaultIn(node);
    }

    public void outAFuncCallExpression(AFuncCallExpression node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallExpression(AFuncCallExpression node)
    {
        inAFuncCallExpression(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFuncCallExpression(node);
    }

    public void inAValueExpression(AValueExpression node)
    {
        defaultIn(node);
    }

    public void outAValueExpression(AValueExpression node)
    {
        defaultOut(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        inAValueExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueExpression(node);
    }

    public void inAIdentifierExpression(AIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression(AIdentifierExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        inAIdentifierExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierExpression(node);
    }

    public void inAOpenExpression(AOpenExpression node)
    {
        defaultIn(node);
    }

    public void outAOpenExpression(AOpenExpression node)
    {
        defaultOut(node);
    }

    public void caseAOpenExpression(AOpenExpression node)
    {
        inAOpenExpression(node);
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        outAOpenExpression(node);
    }

    public void inATypeExpression(ATypeExpression node)
    {
        defaultIn(node);
    }

    public void outATypeExpression(ATypeExpression node)
    {
        defaultOut(node);
    }

    public void caseATypeExpression(ATypeExpression node)
    {
        inATypeExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATypeExpression(node);
    }

    public void inAMaxExpression(AMaxExpression node)
    {
        defaultIn(node);
    }

    public void outAMaxExpression(AMaxExpression node)
    {
        defaultOut(node);
    }

    public void caseAMaxExpression(AMaxExpression node)
    {
        inAMaxExpression(node);
        if(node.getV1() != null)
        {
            node.getV1().apply(this);
        }
        {
            Object temp[] = node.getV2().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PValue) temp[i]).apply(this);
            }
        }
        outAMaxExpression(node);
    }

    public void inAMinExpression(AMinExpression node)
    {
        defaultIn(node);
    }

    public void outAMinExpression(AMinExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinExpression(AMinExpression node)
    {
        inAMinExpression(node);
        if(node.getV1() != null)
        {
            node.getV1().apply(this);
        }
        {
            Object temp[] = node.getV2().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PValue) temp[i]).apply(this);
            }
        }
        outAMinExpression(node);
    }

    public void inAParExpression(AParExpression node)
    {
        defaultIn(node);
    }

    public void outAParExpression(AParExpression node)
    {
        defaultOut(node);
    }

    public void caseAParExpression(AParExpression node)
    {
        inAParExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAParExpression(node);
    }

    public void inAListDefExpression(AListDefExpression node)
    {
        defaultIn(node);
    }

    public void outAListDefExpression(AListDefExpression node)
    {
        defaultOut(node);
    }

    public void caseAListDefExpression(AListDefExpression node)
    {
        inAListDefExpression(node);
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        {
            Object temp[] = node.getE2().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAListDefExpression(node);
    }

    public void inAAndComparison(AAndComparison node)
    {
        defaultIn(node);
    }

    public void outAAndComparison(AAndComparison node)
    {
        defaultOut(node);
    }

    public void caseAAndComparison(AAndComparison node)
    {
        inAAndComparison(node);
        if(node.getComp1() != null)
        {
            node.getComp1().apply(this);
        }
        if(node.getComp2() != null)
        {
            node.getComp2().apply(this);
        }
        outAAndComparison(node);
    }

    public void inAOrComparison(AOrComparison node)
    {
        defaultIn(node);
    }

    public void outAOrComparison(AOrComparison node)
    {
        defaultOut(node);
    }

    public void caseAOrComparison(AOrComparison node)
    {
        inAOrComparison(node);
        if(node.getComp1() != null)
        {
            node.getComp1().apply(this);
        }
        if(node.getComp2() != null)
        {
            node.getComp2().apply(this);
        }
        outAOrComparison(node);
    }

    public void inANotComparison(ANotComparison node)
    {
        defaultIn(node);
    }

    public void outANotComparison(ANotComparison node)
    {
        defaultOut(node);
    }

    public void caseANotComparison(ANotComparison node)
    {
        inANotComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outANotComparison(node);
    }

    public void inAGreatComparison(AGreatComparison node)
    {
        defaultIn(node);
    }

    public void outAGreatComparison(AGreatComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreatComparison(AGreatComparison node)
    {
        inAGreatComparison(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAGreatComparison(node);
    }

    public void inALessComparison(ALessComparison node)
    {
        defaultIn(node);
    }

    public void outALessComparison(ALessComparison node)
    {
        defaultOut(node);
    }

    public void caseALessComparison(ALessComparison node)
    {
        inALessComparison(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outALessComparison(node);
    }

    public void inALeqComparison(ALeqComparison node)
    {
        defaultIn(node);
    }

    public void outALeqComparison(ALeqComparison node)
    {
        defaultOut(node);
    }

    public void caseALeqComparison(ALeqComparison node)
    {
        inALeqComparison(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outALeqComparison(node);
    }

    public void inAGeqComparison(AGeqComparison node)
    {
        defaultIn(node);
    }

    public void outAGeqComparison(AGeqComparison node)
    {
        defaultOut(node);
    }

    public void caseAGeqComparison(AGeqComparison node)
    {
        inAGeqComparison(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAGeqComparison(node);
    }

    public void inANeqComparison(ANeqComparison node)
    {
        defaultIn(node);
    }

    public void outANeqComparison(ANeqComparison node)
    {
        defaultOut(node);
    }

    public void caseANeqComparison(ANeqComparison node)
    {
        inANeqComparison(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outANeqComparison(node);
    }

    public void inAEqComparison(AEqComparison node)
    {
        defaultIn(node);
    }

    public void outAEqComparison(AEqComparison node)
    {
        defaultOut(node);
    }

    public void caseAEqComparison(AEqComparison node)
    {
        inAEqComparison(node);
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAEqComparison(node);
    }

    public void inATrueComparison(ATrueComparison node)
    {
        defaultIn(node);
    }

    public void outATrueComparison(ATrueComparison node)
    {
        defaultOut(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        inATrueComparison(node);
        outATrueComparison(node);
    }

    public void inAFalseComparison(AFalseComparison node)
    {
        defaultIn(node);
    }

    public void outAFalseComparison(AFalseComparison node)
    {
        defaultOut(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        inAFalseComparison(node);
        outAFalseComparison(node);
    }

    public void inAFunctionCall(AFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCall(AFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCall(AFunctionCall node)
    {
        inAFunctionCall(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAFunctionCall(node);
    }

    public void inAMethodValue(AMethodValue node)
    {
        defaultIn(node);
    }

    public void outAMethodValue(AMethodValue node)
    {
        defaultOut(node);
    }

    public void caseAMethodValue(AMethodValue node)
    {
        inAMethodValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAMethodValue(node);
    }

    public void inANumberValue(ANumberValue node)
    {
        defaultIn(node);
    }

    public void outANumberValue(ANumberValue node)
    {
        defaultOut(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        inANumberValue(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outANumberValue(node);
    }

    public void inAStringValue(AStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValue(AStringValue node)
    {
        defaultOut(node);
    }

    public void caseAStringValue(AStringValue node)
    {
        inAStringValue(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringValue(node);
    }

    public void inANoneValue(ANoneValue node)
    {
        defaultIn(node);
    }

    public void outANoneValue(ANoneValue node)
    {
        defaultOut(node);
    }

    public void caseANoneValue(ANoneValue node)
    {
        inANoneValue(node);
        if(node.getNone() != null)
        {
            node.getNone().apply(this);
        }
        outANoneValue(node);
    }
}
