/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGoal(AGoal node);
    void caseAFuncCommand(AFuncCommand node);
    void caseAStatementCommand(AStatementCommand node);
    void caseAFunction(AFunction node);
    void caseAArgument(AArgument node);
    void caseACommaIdAssignValue(ACommaIdAssignValue node);
    void caseAAssignValue(AAssignValue node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatement(AForStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseAAssignmentStatement(AAssignmentStatement node);
    void caseAAssertStatement(AAssertStatement node);
    void caseAFuncCallStatement(AFuncCallStatement node);
    void caseAAssignAssignmentStatement(AAssignAssignmentStatement node);
    void caseAMinusAssignAssignmentStatement(AMinusAssignAssignmentStatement node);
    void caseADivAssignAssignmentStatement(ADivAssignAssignmentStatement node);
    void caseAAssignListAssignmentStatement(AAssignListAssignmentStatement node);
    void caseASumExpression(ASumExpression node);
    void caseAValueExpression(AValueExpression node);
    void caseASumSum(ASumSum node);
    void caseAMinusSum(AMinusSum node);
    void caseATermSum(ATermSum node);
    void caseAMultTerm(AMultTerm node);
    void caseADivTerm(ADivTerm node);
    void caseAModuloTerm(AModuloTerm node);
    void caseAPowerTerm(APowerTerm node);
    void caseAExpPower(AExpPower node);
    void caseASubscriptionPower(ASubscriptionPower node);
    void caseASubscriptionSubscription(ASubscriptionSubscription node);
    void caseAFuncSubscription(AFuncSubscription node);
    void caseAOpenFunc(AOpenFunc node);
    void caseATypeFunc(ATypeFunc node);
    void caseAMaxFunc(AMaxFunc node);
    void caseAMinFunc(AMinFunc node);
    void caseAFuncFunc(AFuncFunc node);
    void caseAParFunc(AParFunc node);
    void caseACommaValue(ACommaValue node);
    void caseAParPar(AParPar node);
    void caseAExpressionPar(AExpressionPar node);
    void caseAComparison(AComparison node);
    void caseAFunCallValue(AFunCallValue node);
    void caseANumValue(ANumValue node);
    void caseAStringValue(AStringValue node);
    void caseANumber(ANumber node);
    void caseAFunctionCall(AFunctionCall node);
    void caseAArglist(AArglist node);
    void caseACommaExpression(ACommaExpression node);

    void caseTLineComment(TLineComment node);
    void caseTTab(TTab node);
    void caseTAssign(TAssign node);
    void caseTMinusAssign(TMinusAssign node);
    void caseTDivAssign(TDivAssign node);
    void caseTExclam(TExclam node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTComma(TComma node);
    void caseTQmark(TQmark node);
    void caseTSemi(TSemi node);
    void caseTDot(TDot node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMode(TMode node);
    void caseTDmult(TDmult node);
    void caseTIf(TIf node);
    void caseTIn(TIn node);
    void caseTElif(TElif node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTOpen(TOpen node);
    void caseTType(TType node);
    void caseTMax(TMax node);
    void caseTMin(TMin node);
    void caseTAssert(TAssert node);
    void caseTDictt(TDictt node);
    void caseTDef(TDef node);
    void caseTNone(TNone node);
    void caseTLeq(TLeq node);
    void caseTLess(TLess node);
    void caseTGeq(TGeq node);
    void caseTGreat(TGreat node);
    void caseTNeq(TNeq node);
    void caseTEq(TEq node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTColon(TColon node);
    void caseTQuote(TQuote node);
    void caseTBlank(TBlank node);
    void caseTIntegerLiteral(TIntegerLiteral node);
    void caseTIdentifier(TIdentifier node);
    void caseTStringLiteral(TStringLiteral node);
    void caseEOF(EOF node);
}
